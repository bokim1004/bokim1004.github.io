{"componentChunkName":"component---src-templates-blog-post-js","path":"/etc/항해플러스-프론트엔드-5기_1주차-회고/","result":{"data":{"site":{"siteMetadata":{"title":"프론트엔드 기록 by chloee 🐳","author":"chloee","siteUrl":"https://bokim1004.github.io","comment":{"disqusShortName":"https-bokim1004-github-io","utterances":"bokim1004/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"eb4c0668-b02e-5d79-b29a-b52dda43b4e6","excerpt":"들어가며 항해플러스 프론트엔드 1주차가 드디어 시작되었다.\n항해플러스 과정에 대한 이야기는 많이 들었는데, 생각보다 빡세지만 배우는게 많다는 후기가 많아서 지원하게 되었다. \n난 어떤 환경안에 있는지 굉장히 중요한 사람이라 들어오길 참 잘했다는 생각이 든 1주였다.\n1주차 과제는 vanilla JS로 SPA를 개발하는 것이었다. vanilla JS로 개발하는 것부터 넘 오랜만이라 기대되는 시간이었다.\n1주차 과제를 완료한 후, 회고를 해봤다. 🙌 과제를 통해 배운 점 1. Vanilla JS…","html":"<h3 id=\"들어가며\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\" aria-label=\"들어가며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가며</h3>\n<p>항해플러스 프론트엔드 1주차가 드디어 시작되었다.\n항해플러스 과정에 대한 이야기는 많이 들었는데, 생각보다 빡세지만 배우는게 많다는 후기가 많아서 지원하게 되었다. <br/>\n난 어떤 환경안에 있는지 굉장히 중요한 사람이라 들어오길 참 잘했다는 생각이 든 1주였다.\n1주차 과제는 vanilla JS로 SPA를 개발하는 것이었다. vanilla JS로 개발하는 것부터 넘 오랜만이라 기대되는 시간이었다.<br/>\n1주차 과제를 완료한 후, 회고를 해봤다.</p>\n<hr>\n<h3 id=\"-과제를-통해-배운-점\" style=\"position:relative;\"><a href=\"#-%EA%B3%BC%EC%A0%9C%EB%A5%BC-%ED%86%B5%ED%95%B4-%EB%B0%B0%EC%9A%B4-%EC%A0%90\" aria-label=\" 과제를 통해 배운 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🙌 과제를 통해 배운 점</h3>\n<p><strong>1. Vanilla JS로 라우팅 구현을 하며 새롭게 배운 점들이 많았다.</strong></p>\n<ul>\n<li>historyAPI를 이용한 browser 라우터뿐만 아니라 hash를 이용한 라우터방식도 있다는 것을 새롭게 알게 되었다.</li>\n<li>historyAPI에서 <code class=\"language-text\">history.popState() ,history.replaceState(),history.pushState()</code>가 어떻게 동작하는지 구분해서 이해하게 되었다.</li>\n<li>history 기반 라우팅은 브라우저 주소는 변경되지만, 페이지는 새로고침 없이 전환된다는 것을 직접 구현하면서 체감할 수 있었다.</li>\n</ul>\n<p>또한 테스트 코드를 실행하면서 놓치고 있던 부분도 발견하게 되었는데,<br/>\n<code class=\"language-text\">history.replaceState(null, \"\",${BASE_PATH}/login);</code><br/>\n이렇게 브라우저 라우팅 시 URL을 변경하더라도 실제 DOM이 변경되는 건 아니기 때문에, 아래 코드처럼 직접 렌더링을 트리거해줘야 한다는 점을 알게 되었다.\n이 부분은 실제 라우팅 동작에 대해 더 깊이 이해할 수 있었던 계기가 되었다.<br/>\n<code class=\"language-text\">root.innerHTML = routes[${BASE_PATH}/login]();</code></p>\n<p><strong>2. Vanila JS로 개발 시, 이벤트 등록과 관련해서도 잘 이해하게 되었다.</strong></p>\n<p>submit 이벤트를 동작하기 위해서는 아래와 같이 addEventListener를 해줘야 동작을 하는데,<br/>\n<code class=\"language-text\">form.addEventListener(\"submit\", (e) =></code> 이 이벤트 리스너가 화면이 로드될 때 등록되어야 한다는 것도 이번에 깨달았다.</p>\n<p>현재는 renderRoute 함수 안에서 이벤트 등록이 이뤄지며, DOMContentLoaded 시점에 실행되도록 아래와 같이 처리했다.\n<code class=\"language-text\">window.addEventListener(\"DOMContentLoaded\", renderRoute);</code></p>\n<p>이처럼 과제를 진행하면서 Vanilla JS에서의 라우팅 처리, 이벤트 바인딩, DOM 조작 방식 등에 대해 실전으로 익힐 수 있었고, 이전에는 깊게 생각하지 않았던 동작 원리들을 배울 수 있었다.</p>\n<hr>\n<h3 id=\"-해결이-어려웠던-문제를-해결한-과정\" style=\"position:relative;\"><a href=\"#-%ED%95%B4%EA%B2%B0%EC%9D%B4-%EC%96%B4%EB%A0%A4%EC%9B%A0%EB%8D%98-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%9C-%EA%B3%BC%EC%A0%95\" aria-label=\" 해결이 어려웠던 문제를 해결한 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌟 해결이 어려웠던 문제를 해결한 과정</h3>\n<p><strong>1. 로그아웃하고 → 로그인 페이지로 넘어가는 부분에서 문제가 있어서 많은 시간을 소요했다.</strong></p>\n<blockquote>\n<p>문제가 있었던 코드:<br/>\n<code class=\"language-text\">&lt;li>&lt;a href=\"/login\" id=\"logout\" data-route-link class=\"text-gray-600\">로그아웃&lt;/a>&lt;/li></code> <br/></p>\n</blockquote>\n<p>로그아웃 시, login으로 바로가게 해줬었는데 문제는 로그아웃 시 동작해야하는 클릭 이벤트가 동작을 안하고 href 동작에 따라 로그인페이지로만 이동하는 현상이 있었다.\n맨처음 DOMContentLoaded할 때, 이벤트를 등록해줬는데 이벤트가 동작되지 않는 이슈였다.</p>\n<p>다음과 같이 해결을 해주니 문제가 해결되었다.😀😀</p>\n<p><strong>a). a 태그 안에서 data-route-link를 지워줬다.</strong></p>\n<p>왜냐하면 data-route-link가 있으면 아래 코드가 동작되어서 href 속성 값을 가져와서 이동을 하기 때문이었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> link <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">closest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a[data-route-link]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">navigateTo</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>로그아웃 이벤트보다 위 코드가 먼저 실행돼서 로그아웃이 무시되는 것으로 보여서 로그아웃 시에는 동작하지 않게 해줬다.</p>\n<p><strong>b).<code class=\"language-text\">&lt;a href=”/#</code>으로 href속성을 변경해줬다.</strong></p>\n<p><code class=\"language-text\">&lt;a></code>의 기본 동작을 비활성화해주기 위해서였다.<br/></p>\n<blockquote>\n<p><code class=\"language-text\">&lt;li>&lt;a href=\"#\" id=\"logout\"  class=\"text-gray-600\">로그아웃&lt;/a>&lt;/li></code></p>\n</blockquote>\n<p><strong>c). 로그아웃 이벤트 클릭 동작은 이벤트 위임 방식으로 해주었다.</strong></p>\n<p>document에 클릭 이벤트를 한 번만 등록해두고, 실제 클릭된 요소(event.target)에서 #logout 요소를 찾아서 처리하는 이벤트 위임방식으로 실행되게 해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> logoutBtn <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">closest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#logout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logoutBtn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Store<span class=\"token punctuation\">.</span><span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    history<span class=\"token punctuation\">.</span><span class=\"token function\">replaceState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">BASE_PATH</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/login</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">renderRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 과정으로 해결해주니 문제가 해결되었다~!</p>\n<p><strong>2. 가장 시간을 많이 쏟았던 이슈는 hash 라우터 이슈였다.</strong></p>\n<p>배포 과정을 마치고 index.hash.html로 들어가면 404페이지가 나오는 이슈가 있었다. <br/>\n이 이슈의 원인은 <code class=\"language-text\">BASE_PATH(/front_5th_chapter1-1/)가 중복</code>된 것이었다. 이 원인을 알아내기까지 너무 삽질이 많았다ㅠㅠ</p>\n<p>이 문제는 hash router쪽에 BASE_PATH를 다 지워주니 해결이 되었다.<br/>\n<code class=\"language-text\">BrowserRouter</code>와 <code class=\"language-text\">HashRouter</code>는 URL을 해석하는 방식이 달라서 base_path 처리 방식도 다르게 가져가야한다는 것을 이번 계기로 알게 되었다.\n<code class=\"language-text\">BrowserRouter</code>는 실제 경로(URL path)를 사용하기 때문에 base_path 설정이 필요하지만, <code class=\"language-text\">HashRouter</code>는 # 뒤에 붙는 해시로 경로를 관리하기 때문에 base_path를 넣을 필요가 없었다. 오히려 넣으면 base_path가 중복되었다.<br/>\n그래서 base_path를 넣지 않고 라우팅되게 해주었다.</p>\n<p>내가 이해하지 못하고 있던 부분이 <code class=\"language-text\">vite.config.js</code>에서 base를 설정해준 부분이었는데, 이 부분은 이 웹사이트는 <code class=\"language-text\">/front_5th_chapter1-1/ 하위 폴더 안</code>에 있으니 이걸 참고해 파일을 가져오라는 것이다.</p>\n<blockquote>\n<p><code class=\"language-text\">base: isProd ? \"/front_5th_chapter1-1/\" : \"/\",</code></p>\n</blockquote>\n<p>그런데 이 부분은 라우팅(URL path)을 위한 건 아니기 때문에 브라우저 라우팅 시 base path(/front_5th_chapter1-1/ )를 넣어야하는 것이었고, HashRouter는 그냥 index.hash.html만 잘 열리면, JS가 알아서 해시 경로 보고 라우팅해주는 방식이기 때문에 라우팅 자체는 base path를 신경 안 써도 되는 구조인 것라는 것을 알게 되었다…!</p>\n<hr>\n<h3 id=\"keep--현재-만족하고-계속-유지할-부분\" style=\"position:relative;\"><a href=\"#keep--%ED%98%84%EC%9E%AC-%EB%A7%8C%EC%A1%B1%ED%95%98%EA%B3%A0-%EA%B3%84%EC%86%8D-%EC%9C%A0%EC%A7%80%ED%95%A0-%EB%B6%80%EB%B6%84\" aria-label=\"keep  현재 만족하고 계속 유지할 부분 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Keep : 현재 만족하고 계속 유지할 부분</strong></h3>\n<p>시간을 지켜 1주차 과제를 잘 마무리하려고 했던 부분은 계속 유지해야할 부분이다.10주가 굉장히 물흐르듯 빠르게 지나갈 것 같다~\n과제에서 만족스러웠던 부분은 컴포넌트를 페이지 단위로 분리하고, 사용자 상태를 Store.js 에서 따로 관리하도록 구조화한 점이 만족스러웠다.</p>\n<h3 id=\"problem--개선이-필요하다고-생각하는-문제점\" style=\"position:relative;\"><a href=\"#problem--%EA%B0%9C%EC%84%A0%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%98%EB%8B%A4%EA%B3%A0-%EC%83%9D%EA%B0%81%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"problem  개선이 필요하다고 생각하는 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Problem : 개선이 필요하다고 생각하는 문제점</strong></h3>\n<p>1주차 과제를 하며 아쉬웠던 부분은 다음과 같다.</p>\n<p><code class=\"language-text\">디자인 패턴 관련</code></p>\n<ul>\n<li>처음 설계시 디자인 패턴을 구체적으로 정하고 개발하지 못했던 부분이 아쉬워서, 시간이 되면 리팩토링을 해보면 좋을 것 같다.</li>\n</ul>\n<p><code class=\"language-text\">renderRoute 되는 부분</code></p>\n<ul>\n<li>아쉬운 부분은 renderRoute되는 코드 부분이다. 더 깔끔하게 분리해놓으면 좋은 코드가 될 것 같아서 리팩토링이 필요하다.</li>\n</ul>\n<p><code class=\"language-text\">router 파일 관련</code></p>\n<ul>\n<li>브라우저 라우터와 hash 라우터 부분을 다른 파일로 서로 구분해 줬는데, 두 파일에서 공통적으로 사용되는 코드가 있어서 이 부분은 따로 빼서 재사용되게 하면 더 좋을 것 같다.</li>\n</ul>\n<p>전반적으로 디자인패턴 고려하여 리팩토링하면 코드가 전반적으로 깔끔해지고 가독성높아질 것 같다는 생각을 했다.</p>\n<h3 id=\"try--문제점을-해결하기-위해-시도해야-할-것\" style=\"position:relative;\"><a href=\"#try--%EB%AC%B8%EC%A0%9C%EC%A0%90%EC%9D%84-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%B4-%EC%8B%9C%EB%8F%84%ED%95%B4%EC%95%BC-%ED%95%A0-%EA%B2%83\" aria-label=\"try  문제점을 해결하기 위해 시도해야 할 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Try : 문제점을 해결하기 위해 시도해야 할 것</strong></h3>\n<p>처음 개발을 시작할 때, 설계를 잘하고 시작하면 좋을 것 같다. 제대로된 설계없이 구현에 급급하고, 테스트코드 통과에만 집중했던 시간도 많아서 아쉬운 점들이 있었다.\n설계는 수정되기도 하지만, 2주차 과제를 할 때 첫 단추를 잘 끼우고 들어가보려고 한다.</p>","frontmatter":{"title":"항해플러스 프론트엔드 5기_1주차 회고","date":"March 30, 2025","image":"https://velog.velcdn.com/images/chloeee/post/db477a29-3257-42ee-b936-58629e0ef09f/image.png"}}},"pageContext":{"slug":"/etc/항해플러스-프론트엔드-5기_1주차-회고/","previous":{"fields":{"slug":"/javascript/vanillaJs_router/"},"frontmatter":{"title":"Vanilla JS에서 브라우저 라우터와 Hash 라우터의 차이"}},"next":{"fields":{"slug":"/etc/항해플러스-프론트엔드-5기_2주차-회고/"},"frontmatter":{"title":"항해플러스 프론트엔드 5기_2주차 회고"}}}},"staticQueryHashes":["2486386679","3128451518"]}