{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/vanilla-js에서-\bbrowser-라우터와-hash-라우터의-차이와-구현-방법/","result":{"data":{"site":{"siteMetadata":{"title":"프론트엔드 기록 by chloee 🐳","author":"chloee","siteUrl":"https://bokim1004.github.io","comment":{"disqusShortName":"https-bokim1004-github-io","utterances":"bokim1004/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"ae8bcffb-270b-5f33-9a14-9d75f37eec25","excerpt":"들어가며 오랜만에 Vanilla JS로 개발을 해볼 일이 생겼다.Vanilla JS로 SPA 구현하기를 진행하다보니 라우팅 구현을 두 가지 방식으로 구현할 수 있다는 것을 알게 되었다.\n바로 History API를 이용한 와 이다. 이 두 방식의 차이와 동작 원리를 더 깊이 이해하고 싶어졌고, 실제로 라우팅 시 겪었던 이슈들도 함께 정리해봤다. 🔍 1. Hash Router란? ✨ 특징 URL…","html":"<h3 id=\"들어가며\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\" aria-label=\"들어가며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가며</h3>\n<p>오랜만에 Vanilla JS로 개발을 해볼 일이 생겼다.Vanilla JS로 SPA 구현하기를 진행하다보니 라우팅 구현을 두 가지 방식으로 구현할 수 있다는 것을 알게 되었다.\n바로 History API를 이용한 <code class=\"language-text\">Browser 라우터</code>와 <code class=\"language-text\">Hash 라우터</code>이다. 이 두 방식의 차이와 동작 원리를 더 깊이 이해하고 싶어졌고, 실제로 라우팅 시 겪었던 이슈들도 함께 정리해봤다.</p>\n<hr>\n<h3 id=\"-1-hash-router란\" style=\"position:relative;\"><a href=\"#-1-hash-router%EB%9E%80\" aria-label=\" 1 hash router란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔍 1. Hash Router란?</h3>\n<p><strong>✨ 특징</strong></p>\n<ul>\n<li>\n<p>URL의 #(해시)를 기준으로 라우팅한다.<br/>\n<code class=\"language-text\">예: &lt;https://example.com/#/about></code></p>\n</li>\n<li>\n<p><code class=\"language-text\"># 이후의 값</code>은 브라우저가 서버로 전송하지 않는다.</p>\n</li>\n<li>\n<p>서버는 항상 같은 index.html을 응답하고, 클라이언트가 라우팅 처리한다.<br/>\n⸰ 브라우저 주소창에서 아무리 경로가 바뀌어도 서버는 오직 루트 경로<code class=\"language-text\">(/)</code>만 요청받는다.\n⸰ 따라서, 서버에 따로 설정해줄 필요가 없다.</p>\n</li>\n</ul>\n<p><strong>⚙️ 작동 방식</strong></p>\n<ul>\n<li><code class=\"language-text\">window.addEventListener('hashchange', callback)</code>을 통해 URL 변경을 감지한다.</li>\n<li>location.hash 값을 기반으로 화면을 렌더링한다.</li>\n</ul>\n<p><strong>🌟 장점</strong></p>\n<ul>\n<li>서버 설정이 필요 없어서 정적 호스팅에 적합하다.</li>\n<li>아주 간단하게 구현 가능하다.</li>\n</ul>\n<p><strong>❌ 단점</strong></p>\n<ul>\n<li>SEO에 불리하다.(구글이 해시 기반 라우팅을 완전히 크롤링하지 못하는 경우도 있다고 함)</li>\n<li>브라우저 기본 동작과 달라 사용자 경험이 떨어질 수 있다.</li>\n</ul>\n<hr>\n<h3 id=\"--2-browser-router-history-router란\" style=\"position:relative;\"><a href=\"#--2-browser-router-history-router%EB%9E%80\" aria-label=\"  2 browser router history router란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔍  2. Browser Router (History Router)란?</h3>\n<p><strong>✨ 특징</strong></p>\n<ul>\n<li>\n<p>Browser Router는 HTML5 History API를 기반으로 URL을 관리한다.\n<code class=\"language-text\">예: https://example.com/about</code></p>\n</li>\n<li>\n<p>URL 경로를 그대로 사용하기에, 서버가 해당 경로 요청을 처리할 수 있도록 설정이 필요하다.</p>\n</li>\n<li>\n<p>실제로 페이지를 새로고침하지 않으면서도, 마치 페이지가 이동한 것처럼 보이게 한다.</p>\n</li>\n</ul>\n<br/>\n<p><strong>⚙️ 작동 방식</strong></p>\n<p>Browser Router는 다음 세 가지 History API를 기반으로 동작한다:<br/>\n<code class=\"language-text\">1. history.pushState(state, title, url)</code></p>\n<ul>\n<li>브라우저 주소창의 URL을 바꾸면서도 새로고침 없이 페이지 전환이 가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/profile</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드는 브라우저 주소창을 profile로 바꾼다.<br/>\n<strong>주의해야할 점은 화면은 직접 다시 렌더링해야 한다는 것이다</strong>\nhistory.pushState는 그저 url만 바꿔준다.</p>\n<p><code class=\"language-text\">2. history.replaceState(state, title, url)</code></p>\n<ul>\n<li>현재 페이지의 URL을 대체한다. (뒤로 가기로 이전 URL로 돌아가지 않음)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    history<span class=\"token punctuation\">.</span><span class=\"token function\">replaceState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">BASE_PATH</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/login</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code class=\"language-text\">3.popState 이벤트</code></p>\n<ul>\n<li>브라우저에서 뒤로 가기 / 앞으로 가기 했을 때 발생하는 이벤트이다.</li>\n<li>pushState, replaceState는 이 이벤트를 트리거하지 않는다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"popstate\"</span><span class=\"token punctuation\">,</span> renderRoute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><strong>🌟 장점</strong></p>\n<ul>\n<li>URL이 깔끔하고, 사용자 경험이 더 자연스럽다.</li>\n<li>SEO에 유리하다.</li>\n</ul>\n<p><strong>❌ 단점</strong></p>\n<ul>\n<li>정적 호스팅(GitHub Pages 등)에서는 설정이 번거로울 수 있다.</li>\n<li>서버 설정이 필요하다.\n⸰ 모든 경로 요청에 대해 <code class=\"language-text\">index.html</code>을 리턴하도록 설정하지 않으면, 새로고침 시 404에러가 발생한다.</li>\n</ul>\n<p><strong>📌 BrowserRouter는 왜 서버 설정이 필요할까?</strong><br/></p>\n<p>예를 들어 <code class=\"language-text\">https://example.com/profile</code> 이런 URL 경로가 있다고 하자. <br/>\n브라우저는 서버에 <code class=\"language-text\">/profile</code>경로로 요청을 보낸다. 서버는 이 경로에 해당하는 파일을 찾는데, 이 경로에 맞는 파일이 없으면 404에러가 발생하는 것이다.<br/></p>\n<p>SPA구현 시 모든 페이지가 <code class=\"language-text\">index.html</code>하나로 구성되고 JS가 클라이언트에서 경로에 맞는 컴포넌트를 렌더링하는데 서버는 모든 경로 요청에 대해 <code class=\"language-text\">index.html</code>을 리턴하도록 설정해야 한다.<br/>\n난 package.json에서 build시 <code class=\"language-text\">cp dist/index.html dist/404.html</code> 이 부분을 추가해줬다. build시  404.html을 index.html처럼 동작하게한 것인데, index.html을 그대로 복사해서 404.html로 만들어두면 404처럼 보여도 실제로는 라우팅이 잘 작동하게 된다.</p>\n<hr>\n<h3 id=\"-라우터-구현-시-겪은-이슈\" style=\"position:relative;\"><a href=\"#-%EB%9D%BC%EC%9A%B0%ED%84%B0-%EA%B5%AC%ED%98%84-%EC%8B%9C-%EA%B2%AA%EC%9D%80-%EC%9D%B4%EC%8A%88\" aria-label=\" 라우터 구현 시 겪은 이슈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛠 라우터 구현 시 겪은 이슈</h3>\n<p>나의 경우엔 배포 시 url에 BASE_PATH가 붙어야했다. 그래서 Browser Router에서 다음처럼 설정했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>$<span class=\"token punctuation\">{</span><span class=\"token constant\">BASE_PATH</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> MainPage<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>$<span class=\"token punctuation\">{</span><span class=\"token constant\">BASE_PATH</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>login<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> LoginPage<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>$<span class=\"token punctuation\">{</span><span class=\"token constant\">BASE_PATH</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>profile<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> ProfilePage<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그런데 문제는 hash router쪽 배포한 url로 들어가면 404페이지가 나오는 이슈가 있었다.\n문제의 원인을 한참들여다 봤다,,<br/>\n<code class=\"language-text\">vite.config.js</code>부분에 아래와 같이 build옵션을 설정해주고, base도 설정해줬다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token literal-property property\">base</span><span class=\"token operator\">:</span> isProd <span class=\"token operator\">?</span> <span class=\"token string\">\"/front_5th_chapter1-1/\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token literal-property property\">build</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">rollupOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">input</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">main</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"index.hash.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>빌드하면 dist에 <code class=\"language-text\">index.hash.html</code>파일은 잘 생성되었지만, Hash Router에서 base path가 URL에 중복된 것이 문제의 원인이었다.\nBrowserRouter와 HashRouter는 URL을 해석하는 방식이 달라서 base_path 처리 방식도 다르게 가져가야한다는 것을 알게 되었다.<br/>\nHash Router에서는 BASE_PATH를 제거하고 아래와 같이 경로를 간단하게 설정했다.<br/>\nBrowserRouter는 실제 경로(URL path)를 사용하기 때문에 base_path 설정이 필요했다.\n난 GitHub Pages처럼 서브 디렉토리에 호스팅이 필요했기에 base 설정이 필수인 상황이었다.<br/>\n그러나, HashRouter는 # 뒤에 붙는 해시로 경로를 관리하기 때문에, base_path를 넣을 필요가 없었다.<br/>\n오히려 넣으면 base_path가 중복되었다.\n그래서 base_path를 넣지 않고 라우팅되게 해주었다~!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> hashRoutes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> MainPage<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> LoginPage<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"/profile\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> ProfilePage<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<hr>\n<h3 id=\"-요약\" style=\"position:relative;\"><a href=\"#-%EC%9A%94%EC%95%BD\" aria-label=\" 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ 요약</h3>\n<table>\n<thead>\n<tr>\n<th>항목</th>\n<th>Hash Router</th>\n<th>Browser Router</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>URL 형태</td>\n<td>example.com/#/about</td>\n<td>example.com/about</td>\n</tr>\n<tr>\n<td>서버 설정 필요 여부</td>\n<td>❌ 필요 없음</td>\n<td>✅ 필요 (모든 요청을 index.html로 응답)</td>\n</tr>\n<tr>\n<td>SEO</td>\n<td>❌ 불리함</td>\n<td>✅ 유리함</td>\n</tr>\n<tr>\n<td>장점</td>\n<td>구현이 쉽고 정적 호스팅에 적합</td>\n<td>URL이 자연스럽고 SEO에 좋음</td>\n</tr>\n<tr>\n<td>단점</td>\n<td>SEO와 UX에 단점</td>\n<td>서버 설정이 번거로움</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<hr>\n<h3 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h3>\n<p>핵심적으로 hash router 동작에 대한 이해가 부족했던 것 같다.<br/>\n<code class=\"language-text\">vite.config.js</code>에서 base를 추가한 건 이 웹사이트는 <code class=\"language-text\">/front_5th_chapter1-1/</code> 하위 폴더 안에 있으니 이걸 참고해 파일을 가져오라는 뜻이다.\n그래서 빌드 시 나온 dist에 있는 html파일에서 <code class=\"language-text\">/front_5th_chapter1-1/assets/main.js</code>이런 파일을 가져오는 것이다.<br/>\n그런데 이 부분은 라우팅(URL path)을 위한 건 아니기 때문에 브라우저 라우팅 시 base path(<code class=\"language-text\">/front_5th_chapter1-1/</code> )를 넣어야하는 것이었고,\nHashRouter는 그냥 index.hash.html만 잘 열리면, JS가 알아서 해시 경로 보고 라우팅해주는 방식이기 때문에\n라우팅 자체는 base path를 신경 안 써도 되는 구조인 것이다.<br/>\n개념만 공부하는 것보다 역시 직접 개발해보며 겪어봐야 알게되는 것 같다~~</p>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/pushState\">https://developer.mozilla.org/en-US/docs/Web/API/History/pushState</a></li>\n</ul>","frontmatter":{"title":"Vanilla JS에서 브라우저 라우터와 Hash 라우터의 차이","date":"March 25, 2025","image":"https://velog.velcdn.com/images/chloeee/post/01cbf681-55d4-4e05-8213-d77755bc899b/image.png"}}},"pageContext":{"slug":"/javascript/vanilla-js에서-\bbrowser-라우터와-hash-라우터의-차이와-구현-방법/","previous":{"fields":{"slug":"/react/react-popup-draggable-resizable-npm-만들기/"},"frontmatter":{"title":"npm 패키지 만들어보기 (react-popup-draggable-resizable)"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}