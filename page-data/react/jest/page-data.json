{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/jest/","result":{"data":{"site":{"siteMetadata":{"title":"chloe's tech blog","author":"chloe kim","siteUrl":"https://bokim1004.github.io","comment":{"disqusShortName":"https-bokim1004-github-io","utterances":"bokim1004/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"0451cffb-a660-5115-93e3-67d5206c0f50","excerpt":"개발을 할 때 테스트 코드를 작성하는 곳도 많다고 들었다.\n우리 회사는 테스트 코드를 아직 작성하지 않는데 나중에 꼭 해보자고 건의해보고 싶은 부분이다.\n그러기 위해서는 테스트 코드는 무엇이고 어떻게 작성하는지 먼저 아는게 중요하다는 생각이 들었다.\nTDD에 대해 많이 들어봤는데 이것에 대해 알아보고 더 나아가 react에서 테스트를 위해 사용하기 좋은 JS 테스트 프레임워크 에 대해 알아보려고 한다. TDD…","html":"<p>개발을 할 때 테스트 코드를 작성하는 곳도 많다고 들었다.\n우리 회사는 테스트 코드를 아직 작성하지 않는데 나중에 꼭 해보자고 건의해보고 싶은 부분이다.\n그러기 위해서는 테스트 코드는 무엇이고 어떻게 작성하는지 먼저 아는게 중요하다는 생각이 들었다.\nTDD에 대해 많이 들어봤는데 이것에 대해 알아보고 더 나아가 react에서 테스트를 위해 사용하기 좋은 JS 테스트 프레임워크 <code class=\"language-text\">jest</code>에 대해 알아보려고 한다.</p>\n<h2 id=\"tdd-테스트-주도-개발\" style=\"position:relative;\"><a href=\"#tdd-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EA%B0%9C%EB%B0%9C\" aria-label=\"tdd 테스트 주도 개발 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TDD (테스트 주도 개발)</h2>\n<p>테스트 코드를 먼저 작성하는 개발방법론을 테스트 주도 개발이라고 부른다.\n작은 단위의 테스트 케이스를 작성하고 이를 통과하는 코드를 추가하는 단계를 반복하여 구현한다.</p>\n<p><code class=\"language-text\">테스트 코드를 작성해야 하는 이유는 무엇일까?</code></p>\n<ul>\n<li>더욱 깔끔하게 코드를 작성하는게 가능해진다.</li>\n<li>장기적으로 개발 비용을 절감할 수 있다.</li>\n</ul>\n<h3 id=\"tdd-개발-주기를-알아보자\" style=\"position:relative;\"><a href=\"#tdd-%EA%B0%9C%EB%B0%9C-%EC%A3%BC%EA%B8%B0%EB%A5%BC-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90\" aria-label=\"tdd 개발 주기를 알아보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TDD 개발 주기를 알아보자</h3>\n<img src=\"https://velog.velcdn.com/images/chloeee/post/273d0f0e-b72f-4440-9e02-7e59344b9ac4/image.png\" width=\"500px\">\n<ol>\n<li>Red단계 : 실패하는 테스트 코드를 먼저 작성한다.</li>\n<li>Green단계 : 테스트 코드를 성공시키기 위한 실제 코드를 작성한다.</li>\n<li>Blue단계 : 중복 코드 제거 등의 리팩토링을 실행한다.</li>\n</ol>\n<h3 id=\"보통의-개발-방식과-tdd-개발-방식에는-차이가-있다\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%ED%86%B5%EC%9D%98-%EA%B0%9C%EB%B0%9C-%EB%B0%A9%EC%8B%9D%EA%B3%BC-tdd-%EA%B0%9C%EB%B0%9C-%EB%B0%A9%EC%8B%9D%EC%97%90%EB%8A%94-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EC%9E%88%EB%8B%A4\" aria-label=\"보통의 개발 방식과 tdd 개발 방식에는 차이가 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보통의 개발 방식과 TDD 개발 방식에는 차이가 있다.</h3>\n<p>일반적으로 개발할 때, 요구 사항을 분석 => 설계 => 개발 => 테스트 => 배포 형태의 개발주기를 갖는다.</p>\n<p>하지만 이런 방법에는 다음과 같은 위험들이 존재한다.</p>\n<ol>\n<li>소비자의 요구사항이 처음부터 명확하지 않기에 변경될 수 있다.</li>\n<li>처음부터 완벽하게 설계하는 것은 매우 어렵다.</li>\n<li>소스코드 품질이 저하될 수 있다.</li>\n<li>테스트를 할 때 많은 시간과 비용이 필요할 수 있다.</li>\n</ol>\n<p>이렇게 코드를 짜면 재사용이 어렵고 관리가 어려워서 유지보수가 어렵다.\n그렇다면 TDD 개발방식은 어떠할까? <br/>\nTDD의 가장 큰 차이점은 <code class=\"language-text\">테스트 코드를 작성한 후에 실제 코드를 작성한다는 것이다.</code>\n디자인(설계) 단계에서 프로그래밍 목적을 미리 정해야 하고, 무엇보다 테스트해야 할지 미리 정의(테스트 케이스 작성)해야만 한다.\n테스트 코드를 작성하는 도중에 발생하는 예외 사항(버그 및 수정사항)은 테스트 케이스에 추가하고 설계를 개선한다.\n이후에 테스트가 통과된 코드만을 코드 개발 단계에서 실제 코드로 작성한다.</p>\n<h3 id=\"tdd-방식의-장단점은-무엇일까\" style=\"position:relative;\"><a href=\"#tdd-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C\" aria-label=\"tdd 방식의 장단점은 무엇일까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TDD 방식의 장단점은 무엇일까?</h3>\n<p>우선 TDD방식의 장점은 다음과 같다.</p>\n<ol>\n<li>\n<p>더 품질좋은 객체지향적인 코드를 생산할 수 있다.\nTDD는 코드의 재사용 보장을 명시하므로 TDD를 통한 소프트웨어 개발 시 기능 별 철저한 모듈화가 이뤄진다.</p>\n</li>\n<li>\n<p>재설계 시간을 단축할 수 있다.\n테스트 코드를 먼저 작성하기 때문에 개발자가 지금 무엇을 해야하는지 분명히 정의하고 개발을 시작하게된다.\n또한 테스트 시나리오를 작성하면서 다양한 예외사항에 대해 정리할 수 있기에 재설계 시간을 단축할 수 있다.</p>\n</li>\n<li>\n<p>디버깅 시간을 단축할 수 있다.\nTDD의 경우 자동화 된 유닛 테스팅을 전제하므로 특정 버그를 손 쉽게 찾아낼 수 있다</p>\n</li>\n</ol>\n<p>그러나 TDD방식에도 단점은 있다.</p>\n<p>TDD방식으로 개발을 하게 되면 일반적인 개발방식에 비해 더 많은 시간을 필요로 한다,\n소프트웨어의 품질보다는 일정을 맞추는게 훨씬 중요한 곳들은 TDD 방식을 잘 사용하지 않는다고 한다.</p>\n<h2 id=\"js-테스트-프레임워크-jest\" style=\"position:relative;\"><a href=\"#js-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC-jest\" aria-label=\"js 테스트 프레임워크 jest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JS 테스트 프레임워크 Jest</h2>\n<p>자바스크립트를 테스트하기 위한 테스팅 툴이 여러가지가 있다. 그 중 많이 쓰이는 것이 리액트를 만든 페이스북에서 선보인 <code class=\"language-text\">Jest</code>다.</p>\n<h4 id=\"설치\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98\" aria-label=\"설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install jest <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre></div>\n<p>package.json에서 아래와 같이 수정을 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"test\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"jest\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"testjs-작성하기\" style=\"position:relative;\"><a href=\"#testjs-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"testjs 작성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>test.js 작성하기</h4>\n<p>case.js파일이 있다고 하면 case.test.js 파일을 하나 더 만들어 테스트를 위한 코드를 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//case.js</span>\n<span class=\"token keyword\">const</span> case1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">add</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span> num2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">makeUser</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> case1</code></pre></div>\n<p>expect에 검증하는 값을 넣어주고 ToBe에 기대하는 값을 넣어준다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//case.test.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">case</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./case\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1은?\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//성공 케이스</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3더하기 3은 6\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">case</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//실패케이스</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4더하기 3은 6\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">case</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code class=\"language-text\">npm test</code>를 해보면 어떤 것이 fail인지 Pass인지 알 수 있다.</p>\n<h3 id=\"tobe와-toequal은-어떤-차이가-있을까\" style=\"position:relative;\"><a href=\"#tobe%EC%99%80-toequal%EC%9D%80-%EC%96%B4%EB%96%A4-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EC%9E%88%EC%9D%84%EA%B9%8C\" aria-label=\"tobe와 toequal은 어떤 차이가 있을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>toBe와 toEqual은 어떤 차이가 있을까?</h3>\n<p>toBe와 toEqual은 거의 동일하게 쓰인다.</p>\n<p>아래 객체 값을 확인할 때는 toBe로 해보고 테스트를 하면 fail이 뜨지만, toEqual로 하면 pass가 된다.\ntoEqual은 재귀적으로 각 요소들을 확인하기 때문에 그런 것이다.\n보다 엄격하게 테스트를 하려면 <code class=\"language-text\">toStrictEqual</code>을 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이름,나이 전달받아 객체로 반환\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">case</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeUser</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jay\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jay\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3 id=\"tobenull-tobeundefined-tobedefined\" style=\"position:relative;\"><a href=\"#tobenull-tobeundefined-tobedefined\" aria-label=\"tobenull tobeundefined tobedefined permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>toBeNull, toBeUndefined, toBeDefined</h3>\n<p>말 그대로 각각 Null인 경우, undefined인 경우, Defined인 경우 통과된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'null은 Null'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"tobetruthytobefalsy\" style=\"position:relative;\"><a href=\"#tobetruthytobefalsy\" aria-label=\"tobetruthytobefalsy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>toBeTruthy,toBeFalsy</h3>\n<p>boolean값을 판별해준다.</p>\n<p>0은 False이기에 아래를 테스트하면 패스된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0은 false'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">case</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeFalsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"크다작다-비교관련\" style=\"position:relative;\"><a href=\"#%ED%81%AC%EB%8B%A4%EC%9E%91%EB%8B%A4-%EB%B9%84%EA%B5%90%EA%B4%80%EB%A0%A8\" aria-label=\"크다작다 비교관련 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>크다,작다 비교관련</h3>\n<ul>\n<li>toBeGreaterThan(크다)</li>\n<li>toBeGreaterThanOrEqual(크거나 같다)</li>\n<li>toBeLessThan(작다)</li>\n<li>toBeLessThanOrEqual(작거나 같다)</li>\n</ul>\n<p>아래는 통과한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id는 10자 이하'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token string\">'THE_BLACK'</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeLessThanOrEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"tocontain\" style=\"position:relative;\"><a href=\"#tocontain\" aria-label=\"tocontain permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>toContain</h3>\n<p>배열에서 특정요소가 있는지 확인할 때 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'유저 리스트에 Chloe가 있나요?'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token string\">'chloe'</span>\n  <span class=\"token keyword\">const</span> userList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'TOM'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'JANE'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'KAY'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 코드를 테스트 해보면 배열에 속해있지 않기에 fail이 된다.</p>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>TDD에 대해 알아봤고 더 나아가 react에서 테스트를 위해 많이 사용되는 jest에 대해 간단하게만 알아보았다.\nJest를 통해 테스트 코드를 작성하게 되면 더 안정적으로 에러가 더 발생하고 더 높은 품질의 코드를 작성할 수 있게될 것이라는 생각이 들었다.</p>\n<blockquote>\n<p>참고</p>\n</blockquote>\n<ul>\n<li><a href=\"https://hanamon.kr/tdd%EB%9E%80-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EA%B0%9C%EB%B0%9C/\">https://hanamon.kr/tdd%EB%9E%80-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EA%B0%9C%EB%B0%9C/</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=g4MdUjxA-S4\">https://www.youtube.com/watch?v=g4MdUjxA-S4</a></li>\n</ul>","frontmatter":{"title":"TDD(테스트 주도 개발)과 jest에 대하여","date":"February 11, 2023","image":"https://velog.velcdn.com/images/chloeee/post/28f18940-96fb-4da9-9900-0a65685b40d0/image.png"}}},"pageContext":{"slug":"/react/jest/","previous":{"fields":{"slug":"/typescript/type_inference/"},"frontmatter":{"title":"타입 추론"}},"next":{"fields":{"slug":"/etc/about-webpack/"},"frontmatter":{"title":"웹팩(Webpack) 이해하기"}}}},"staticQueryHashes":["2486386679","3128451518"]}