{"componentChunkName":"component---src-templates-blog-post-js","path":"/three.js/animations/","result":{"data":{"site":{"siteMetadata":{"title":"프론트엔드 로그 by 굥 🐳","author":"굥","siteUrl":"https://bokim1004.github.io","comment":{"disqusShortName":"https-bokim1004-github-io","utterances":"bokim1004/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"2ddee642-5c5f-5186-8d80-caf4bf1cbd2e","excerpt":"Three.js journey 강의를 듣고 공부한 것들을 기록합니다. Animations Three.js에서의 Animation은 stop motion같습니다.\n예를 들면 물체를 옮기고 렌더를 하고, 그 다음 또 물체를 옮기고 다른 렌더를 하는 방식으로 진행되기 때문입니다.\n각 프레임마다 렌더를 하고 물체를 업데이트 해야 하는데, 이는  메서드를 이용해 할 수 있습니다.\nrequestAnimationFrame의 목적은 제공된 다음 프레임에 함수를 호출하기 위함입니다. Adaptation to…","html":"<blockquote>\n<p>Three.js journey 강의를 듣고 공부한 것들을 기록합니다.</p>\n</blockquote>\n<p align=\"center\">\n<img src=\"https://velog.velcdn.com/images/chloeee/post/c9eb947c-a3c0-4288-83f3-857c3c2bcc22/image.png\" width=\"550px\" height=\"390px\">\n</p>\n<h3 id=\"animations\" style=\"position:relative;\"><a href=\"#animations\" aria-label=\"animations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Animations</h3>\n<p>Three.js에서의 Animation은 stop motion같습니다.\n예를 들면 물체를 옮기고 렌더를 하고, 그 다음 또 물체를 옮기고 다른 렌더를 하는 방식으로 진행되기 때문입니다.<br/>\n각 프레임마다 렌더를 하고 물체를 업데이트 해야 하는데, 이는 <code class=\"language-text\">window.requestAnimationFrame</code> 메서드를 이용해 할 수 있습니다.\nrequestAnimationFrame의 목적은 제공된 다음 프레임에 함수를 호출하기 위함입니다.<br/></p>\n<h3 id=\"adaptation-to-the-framerate\" style=\"position:relative;\"><a href=\"#adaptation-to-the-framerate\" aria-label=\"adaptation to the framerate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adaptation to the framerate</h3>\n<p>프레임속도에 맞게 animation을 적용시키려면, 지난 tick이랑 비교했을 때 얼마나 많은 시간을 소요로 했는지 알아야 합니다. <br/>\n첫번째, 시간을 측정해야 합니다. <code class=\"language-text\">Date.now()</code>를 사용해 현재 시간을 얻을 수 있습니다.\n현재 시간에 이전 시간을 뺀 <code class=\"language-text\">deltaTime</code>을 이용해 물체를 animating할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">tick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//Time</span>\n    <span class=\"token keyword\">const</span> currentTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 이전 타임을 빼서 delta time을 구할 수 있다. 이는 animation에 사용할 수 있다.</span>\n    <span class=\"token keyword\">const</span> deltaTime <span class=\"token operator\">=</span> currentTime <span class=\"token operator\">-</span> time\n    time <span class=\"token operator\">=</span> currentTime\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>deltaTime<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">//update objects</span>\n    mesh<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+=</span> <span class=\"token number\">0.01</span>\n    mesh<span class=\"token punctuation\">.</span>rotation<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+=</span> <span class=\"token number\">0.02</span> <span class=\"token operator\">*</span> deltaTime\n    \n    <span class=\"token comment\">//render</span>\n    renderer<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">,</span>camera<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">//next frame에 호출된다.</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"using-clock\" style=\"position:relative;\"><a href=\"#using-clock\" aria-label=\"using clock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Clock</h3>\n<p>위에 방법보다 더 쉽게 할 수 있는 방법이 있습니다.\nThree.js에는 <code class=\"language-text\">Clock</code>이라는 빌트인 솔루션이 있는데, 타임 계산을 다루는 역할을 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//Clock</span>\n<span class=\"token keyword\">const</span> clock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//Animations</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">tick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//Clock</span>\n    <span class=\"token keyword\">const</span> elapsedTime <span class=\"token operator\">=</span> clock<span class=\"token punctuation\">.</span><span class=\"token function\">getElapsedTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    mesh<span class=\"token punctuation\">.</span>rotation<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>elapsedTime<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//카메라가 mesh를 바라보게 한다.</span>\n    camera<span class=\"token punctuation\">.</span><span class=\"token function\">lookAt</span><span class=\"token punctuation\">(</span>mesh<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>getElapsedTime() 은 Clock이 만들어진 이후로 얼마나 많은 second가 지났는지 리턴을 할 수 있습니다.\n<code class=\"language-text\">position</code>프로퍼티를 이용해 움직이는 것도 가능합니다. <code class=\"language-text\">Math.sin</code>을 이용하면 up down으로 가볍게 이동합니다.<br>\n<code class=\"language-text\">Math.cos</code>를 이용하면 물체가 circle을 만들며 이동합니다.</p>\n<h3 id=\"using-a-library\" style=\"position:relative;\"><a href=\"#using-a-library\" aria-label=\"using a library permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using a Library</h3>\n<h4 id=\"gsap\" style=\"position:relative;\"><a href=\"#gsap\" aria-label=\"gsap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GSAP</h4>\n<p>scene을 특정한 방법으로 animate하기 위해 library를 사용하는 방법이 있습니다.\n여러가지가 있지만 GSAP가 가장 유명합니다.\n<code class=\"language-text\">npm install --save gsap@3.5.1</code> 터미널에 실행을 하고나면 import해서 아래같이 사용할 수 있습니다.\ngsap.to(…)를 사용하면 테스트를 위한 쌍둥이를 만들 수 있게 되는데요. 트윈 (Animation A에서 B까지) 를 호출해 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> gsap <span class=\"token keyword\">from</span> <span class=\"token string\">'gsap'</span>\n\ngsap<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>mesh<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">duration</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">delay</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span><span class=\"token number\">2</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span></code></pre></div>\n<p>GSAP에는 내장된 <code class=\"language-text\">requestAnimationFrame</code>을 가지고 있기에 매번 animation을 업데이트 하지 않아도 됩니다.\n그래도, 각 프레임마다 물체가 움직이는 것을 보고 싶다면 scene에서 render하는 것은 계속해야합니다.</p>\n<h3 id=\"choosing-the-right-solution\" style=\"position:relative;\"><a href=\"#choosing-the-right-solution\" aria-label=\"choosing the right solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Choosing the Right solution</h3>\n<p>위의 예시에서처럼 native js를 사용하는 것과 animation 라이브러리를 사용하는 방법이 있습니다.\n무엇을 선택하든 상관이 없습니다. 선호하는 방식을 선택하면 됩니다.</p>\n<h3 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h3>\n<p>three.js에서 간단하게 animation하는 방법에 대해 알아보았습니다.\n간단하게 강의를 들었을 때는 쉽게 되는 것 같지만 (?), 실제 프로젝트로 들어가면 더 어려울 것도 같네요.\n미래를 위해 조금씩이라도 꾸준히 three.js를 공부해보려고 합니다. :-)</p>","frontmatter":{"title":"Three.js journey | Animations","date":"June 03, 2023","image":"https://velog.velcdn.com/images/chloeee/post/c9eb947c-a3c0-4288-83f3-857c3c2bcc22/image.png"}}},"pageContext":{"slug":"/three.js/animations/","previous":{"fields":{"slug":"/three.js/transform-objects/"},"frontmatter":{"title":"Three.js journey | transform objects"}},"next":{"fields":{"slug":"/etc/cookie,session,cache/"},"frontmatter":{"title":"cookie,session,cache"}}}},"staticQueryHashes":["2486386679","3128451518"]}