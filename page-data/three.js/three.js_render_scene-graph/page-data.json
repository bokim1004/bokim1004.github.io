{"componentChunkName":"component---src-templates-blog-post-js","path":"/three.js/three.js_render_scene-graph/","result":{"data":{"site":{"siteMetadata":{"title":"프론트엔드 로그 by 굥 🐳","author":"굥","siteUrl":"https://bokim1004.github.io","comment":{"disqusShortName":"https-bokim1004-github-io","utterances":"bokim1004/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"fd8b328b-dba4-55bb-bc64-8532af444a4c","excerpt":"이번엔 Three.js의 기본 요소 중 하나로 장면을 렌더링하는데 필수적인 와 renderer가 화면에 출력할 객체들을 구조적으로 관리해주는\n에 대해 알아보았다. Three.js에서 renderer란? three.js에서 renderer란 3D장면을 실제 화면에 그리는 역할을 한다. \nrenerer는 카메라와 장면(scene)에 대한 정보를 기반으로 3D객체들을 2D화면에 렌더링하여 사용자에게 보여준다.\nThree.js에서는 주로 를 사용하며, 이는 WebGL을 통해 브라우저의 GPU…","html":"<p>이번엔 Three.js의 기본 요소 중 하나로 장면을 렌더링하는데 필수적인 <code class=\"language-text\">renderer</code>와 renderer가 화면에 출력할 객체들을 구조적으로 관리해주는\n<code class=\"language-text\">Scene Graph</code>에 대해 알아보았다.</p>\n<h2 id=\"threejs에서-renderer란\" style=\"position:relative;\"><a href=\"#threejs%EC%97%90%EC%84%9C-renderer%EB%9E%80\" aria-label=\"threejs에서 renderer란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Three.js에서 renderer란?</h2>\n<p>three.js에서 renderer란 3D장면을 실제 화면에 그리는 역할을 한다. <br/>\nrenerer는 카메라와 장면(scene)에 대한 정보를 기반으로 3D객체들을 2D화면에 렌더링하여 사용자에게 보여준다.<br/>\nThree.js에서는 주로 <code class=\"language-text\">WebGLRenderer</code>를 사용하며, 이는 WebGL을 통해 브라우저의 GPU를 활용하여 그래픽 성능을 최적화시켜준다.</p>\n<h3 id=\"div-stylebackgroundffffcc-colorblack-padding7px-1-renderer의-주요-역할-div\" style=\"position:relative;\"><a href=\"#div-stylebackgroundffffcc-colorblack-padding7px-1-renderer%EC%9D%98-%EC%A3%BC%EC%9A%94-%EC%97%AD%ED%95%A0-div\" aria-label=\"div stylebackgroundffffcc colorblack padding7px 1 renderer의 주요 역할 div permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><div style=\"background:#FFFFCC; color:black; padding:7px\"> 1. Renderer의 주요 역할 </div></h3>\n<ol>\n<li>Scene과 Camera 정보처리: renerer는 장면(scene)과 카메라를 입력으로 받아, 카메라 관점에서 scene을 렌더링한다.</li>\n<li>프레임 갱신: 매 프레임마다 <code class=\"language-text\">renderer.render(scene,camera)</code>를 호출하여 애니메이션과 상호작용이 실시간으로 반영되게 한다.</li>\n<li>안티 앨리어싱 등 그래픽 옵션 설정: 렌더러 초기화 시 안티앨리어싱, 해상도 조정 등의 옵션을 통해 렌더링 품질을 제어할 수 있다. <br/></li>\n</ol>\n<p><code class=\"language-text\">renderer</code>는 결과적으로 3D객체들이 화면에 올바르게 나타나도록 돕는 역할을 하며, 이를 통해 생동감있고 몰입감있는 장면을 구현할 수 있다.</p>\n<h3 id=\"div-stylebackgroundffffcc-colorblack-padding7px-2-renderer-설정-및-옵션-div\" style=\"position:relative;\"><a href=\"#div-stylebackgroundffffcc-colorblack-padding7px-2-renderer-%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%98%B5%EC%85%98-div\" aria-label=\"div stylebackgroundffffcc colorblack padding7px 2 renderer 설정 및 옵션 div permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><div style=\"background:#FFFFCC; color:black; padding:7px\"> 2. Renderer 설정 및 옵션 </div></h3>\n<p>WebGLRenderer는 다양한 옵션을 설정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>WebGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">canvas</span><span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">antialias</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 계단 현상 방지</span>\n  <span class=\"token literal-property property\">alpha</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 배경 투명도</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrenderer<span class=\"token punctuation\">.</span><span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code class=\"language-text\">옵션</code></p>\n<ul>\n<li>antialias: true로 설정하면 계단 현상을 줄여준다. 성능에 영향을 줄 수 있지만, 선명한 렌더링 결과를 얻을 수 있다.</li>\n<li>alpha(투명도):배경을 투명하게 만든다. 배경이 웹페이지와 자연스럽게 어우러질 수 있다.</li>\n</ul>\n<p>옵션을 통해 렌더링의 품질과 성능을 제어할 수 있고, scene의 요구사항에 맞게 조정할 수 있다.</p>\n<h3 id=\"div-stylebackgroundffffcc-colorblack-padding7px-3-계단-현상은-무엇인가-div\" style=\"position:relative;\"><a href=\"#div-stylebackgroundffffcc-colorblack-padding7px-3-%EA%B3%84%EB%8B%A8-%ED%98%84%EC%83%81%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-div\" aria-label=\"div stylebackgroundffffcc colorblack padding7px 3 계단 현상은 무엇인가 div permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><div style=\"background:#FFFFCC; color:black; padding:7px\"> 3. 계단 현상은 무엇인가? </div></h3>\n<p>Three.js에서 계단 현상(aliasing)은 렌더링된 이미지의 경계가 부드럽지 않고 계단처럼 보이는 현상이다.</p>\n<img src=\"https://velog.velcdn.com/images/chloeee/post/29b90543-602a-4f64-9e16-053b5292f77b/image.png\" alt=\"img\" width=\"500px\" height=\"400px\">\n<p>주로 고해상도 그래픽에서 각진 경계가 뚜렷하게 나타날 때 발생한다.\n이 문제는 픽셀이 네모난 형태이기 때문에, 비스듬한 선이나 곡선의 가장자리가 부드럽게 보이지 않고, 딱딱한 경계를 형성하게 된다.</p>\n<p><code class=\"language-text\">계단현상의 원인</code></p>\n<ol>\n<li><strong>픽셀화</strong>: 그래픽에서 선이나 경계가 비스듬하게 그려질 때, 화면의 픽셀 그리드와 맞물리면서 비정상적으로 보일 수 있다.</li>\n<li><strong>해상도</strong>: 낮은 해상도로 렌더링할 경우, 더 많은 계단현상이 발생할 수 있다.</li>\n</ol>\n<p><code class=\"language-text\">해결 방법</code></p>\n<p>Three.js에서는 계단현상을 완화하기 위해 다양한 방법을 사용할 수 있다.</p>\n<ol>\n<li>\n<p><strong>안티 앨리어싱(Anti-aliasing)</strong>:</p>\n<ul>\n<li><code class=\"language-text\">WebGLRenderer</code>의 <code class=\"language-text\">antialias</code> 속성을 <code class=\"language-text\">true</code>로 설정하여 안티 앨리어싱을 활성화할 수 있습니다.</li>\n</ul>\n<p>이는 경계의 픽셀 색상을 부드럽게 조정하여 계단현상을 줄여준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>WebGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">antialias</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>\n<p><strong>고해상도 렌더링</strong>:</p>\n<ul>\n<li>더 높은 해상도로 렌더링하고, 화면 크기에 맞게 다운샘플링하면 경계가 더 부드럽게 보일 수 있다.</li>\n<li>이를 위해 <code class=\"language-text\">setSize</code> 메소드를 사용하여 크기를 조정할 수 있다.</li>\n</ul>\n</li>\n</ol>\n<p><code class=\"language-text\">setSize 메서드에 대하여</code>\nsetSize 메서드는 Three.js에서 WebGLRenderer 객체가 렌더링할 캔버스의 크기를 설정하는 데 사용된다.\n이 메서드를 통해 캔버스의 가로와 세로 크기를 지정할 수 있고, 이는 장면의 해상도와 출력 크기에 직접적인 영향을 미친다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">renderer<span class=\"token punctuation\">.</span><span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"3\">\n<li><strong>Post-processing</strong>:\n<ul>\n<li>후처리 효과를 적용하여 안티 앨리어싱을 추가로 적용할 수 있습니다. 예를 들어, FXAA(Fast Approximate Anti-Aliasing)와 같은 후처리 기술을 사용할 수 있다.</li>\n</ul>\n</li>\n<li><strong>텍스처 필터링</strong>:\n<ul>\n<li>텍스처의 필터링 모드를 설정하여 더 부드러운 경계를 만들 수 있습니다. 예를 들어, <code class=\"language-text\">THREE.LinearFilter</code>와 같은 필터를 사용할 수 있다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"div-stylebackgroundffffcc-colorblack-padding7px-4-renderer의-주요-메서드와-활용법-div\" style=\"position:relative;\"><a href=\"#div-stylebackgroundffffcc-colorblack-padding7px-4-renderer%EC%9D%98-%EC%A3%BC%EC%9A%94-%EB%A9%94%EC%84%9C%EB%93%9C%EC%99%80-%ED%99%9C%EC%9A%A9%EB%B2%95-div\" aria-label=\"div stylebackgroundffffcc colorblack padding7px 4 renderer의 주요 메서드와 활용법 div permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><div style=\"background:#FFFFCC; color:black; padding:7px\"> 4. Renderer의 주요 메서드와 활용법 </div></h3>\n<p>renderer에서 가장 중요한 메서드는 <code class=\"language-text\">render(scene, camera)</code>이다.\n이 메서드는 장면(Scene)과 카메라(Camera)를 기반으로 화면에 그림을 그린다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>animate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  renderer<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">,</span> camera<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예시 코드는 requestAnimationFrame을 사용하여 애니메이션 루프를 생성하고 render 메서드를 호출한다.\n이를 통해 장면을 반복적으로 렌더링하여 실시간으로 화면에 출력한다.</p>\n<h2 id=\"scene-graph란\" style=\"position:relative;\"><a href=\"#scene-graph%EB%9E%80\" aria-label=\"scene graph란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scene graph란?</h2>\n<p>씬 그래프는 3D객체들(Scene안에 포함된 요소)을 트리 구조로 구성하여 쉽게 관리할 수 있도록 돕는 개념이다.\n최상위 Scene을 루트로 두고, 그 아래의 여러 노드가 부모-자식 관계로 연결된다. <br/>\n이렇게 계층을 이루는 이유는, 특정 객체가 다른 객체의 자식으로 설정되었을 때, 부모 객체의 이동에 자식도 영향을 받게 하기 위해서다.</p>\n<p>(출처:공식문서)</p>\n<img src=\"https://velog.velcdn.com/images/chloeee/post/001e47fb-d2b7-4549-86f6-3a2b56cb3870/image.png\" alt=\"img\" width=\"500px\" height=\"400px\">\n<p>예를 들어, 부모- 자식관계에 대해 더 설명해보면 부모객체가 이동하거나 회전할 때 자식객체도 자동으로 따라가게 된다.\n아래 예시 코드로 부모객체가 자식 객체에 영향을 주는 모습을 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Scene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Scene은 Scene Graph의 루트</span>\n<span class=\"token keyword\">const</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Object3D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 부모 객체 생성</span>\nscene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 부모 객체를 Scene에 추가</span>\n\n<span class=\"token keyword\">const</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>BoxGeometry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>MeshBasicMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token number\">0x00ff00</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 자식 객체 생성</span>\nparent<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 자식 객체를 부모 객체에 추가</span>\n</code></pre></div>\n<h3 id=\"div-stylebackgroundffffcc-colorblack-padding7px-scene-graph의-주요-내용div\" style=\"position:relative;\"><a href=\"#div-stylebackgroundffffcc-colorblack-padding7px-scene-graph%EC%9D%98-%EC%A3%BC%EC%9A%94-%EB%82%B4%EC%9A%A9div\" aria-label=\"div stylebackgroundffffcc colorblack padding7px scene graph의 주요 내용div permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><div style=\"background:#FFFFCC; color:black; padding:7px\"> Scene graph의 주요 내용</div></h3>\n<h3 id=\"code-classlanguage-text1-장면-scene--3d객체들이-추가되는-최상위-컨테이너code\" style=\"position:relative;\"><a href=\"#code-classlanguage-text1-%EC%9E%A5%EB%A9%B4-scene--3d%EA%B0%9D%EC%B2%B4%EB%93%A4%EC%9D%B4-%EC%B6%94%EA%B0%80%EB%90%98%EB%8A%94-%EC%B5%9C%EC%83%81%EC%9C%84-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88code\" aria-label=\"code classlanguage text1 장면 scene  3d객체들이 추가되는 최상위 컨테이너code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">1) 장면 (Scene) : 3D객체들이 추가되는 최상위 컨테이너</code></h3>\n<p>scene은 씬그래프의 최상위 컨테이너로 3D객체들을 담고 있는 공간이다. <br/>\n모든 3D객체는 이 Scene에 추가되어야 화면에 보이게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Scene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"code-classlanguage-text2-객체object-3d--모든-3d객체의-기본-요소code\" style=\"position:relative;\"><a href=\"#code-classlanguage-text2-%EA%B0%9D%EC%B2%B4object-3d--%EB%AA%A8%EB%93%A0-3d%EA%B0%9D%EC%B2%B4%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EC%9A%94%EC%86%8Ccode\" aria-label=\"code classlanguage text2 객체object 3d  모든 3d객체의 기본 요소code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">2) 객체(Object 3D) : 모든 3D객체의 기본 요소</code></h3>\n<p>Three.js에서 3D객체들은 모두 Object3D를 상속받는다. <code class=\"language-text\">Object3D</code>는 모든 3D객체가 가져야 하는 위치(position), 회전(Rotation), 크기(Scale)속성을 포함하고 있어서\n어떤 3D객체도 이 특성을 가질 수 있게 한다.</p>\n<p>예를 들어, Object3D는 모든 3D객체가 가져야할 기본뼈대이다.\nMesh,Camera같은 구체적인 객체는 Object3D를 통해 이 뼈대를 물려받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> cube <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>geometry<span class=\"token punctuation\">,</span> material<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Mesh도 Object3D를 상속</span>\ncube<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 위치를 조정할 수 있는 이유는 Object3D를 상속했기 때문이다.</span>\nscene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cube<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Scene에 추가하면 화면에 나타남</span></code></pre></div>\n<h3 id=\"code-classlanguage-text3-부모-자식-관계-부모의-변형이-자식에게-자동-적용된다code\" style=\"position:relative;\"><a href=\"#code-classlanguage-text3-%EB%B6%80%EB%AA%A8-%EC%9E%90%EC%8B%9D-%EA%B4%80%EA%B3%84-%EB%B6%80%EB%AA%A8%EC%9D%98-%EB%B3%80%ED%98%95%EC%9D%B4-%EC%9E%90%EC%8B%9D%EC%97%90%EA%B2%8C-%EC%9E%90%EB%8F%99-%EC%A0%81%EC%9A%A9%EB%90%9C%EB%8B%A4code\" aria-label=\"code classlanguage text3 부모 자식 관계 부모의 변형이 자식에게 자동 적용된다code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">3) 부모-자식 관계: 부모의 변형이 자식에게 자동 적용된다.</code></h3>\n<p>부모-자식 관계란 한 객체가 다른 객체에 속하는 구조를 의미한다. 부모 객체가 이동하거나 회전하면 자식 객체도 그 변형에 따라 자동으로 움직인다.<br/>\n이렇게 부모-자식 관계를 설정하면, 복잡한 구조를 단순하게 표현할 수 있다.</p>\n<p>코드 예시를 보면, 부모가 움직이면 자식도 자동으로 움직인다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Object3D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 부모 객체 생성</span>\nscene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 부모를 Scene에 추가</span>\n\n<span class=\"token keyword\">const</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>geometry<span class=\"token punctuation\">,</span> material<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 자식 객체 생성</span>\nparent<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 자식을 부모 객체에 추가</span>\n\n<span class=\"token comment\">// 부모가 움직이면 자식도 자동으로 함께 움직임</span>\nparent<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"code-classlanguage-text4-좌표계-변환-각-객체는-자신의-좌표계에서-변환code\" style=\"position:relative;\"><a href=\"#code-classlanguage-text4-%EC%A2%8C%ED%91%9C%EA%B3%84-%EB%B3%80%ED%99%98-%EA%B0%81-%EA%B0%9D%EC%B2%B4%EB%8A%94-%EC%9E%90%EC%8B%A0%EC%9D%98-%EC%A2%8C%ED%91%9C%EA%B3%84%EC%97%90%EC%84%9C-%EB%B3%80%ED%99%98code\" aria-label=\"code classlanguage text4 좌표계 변환 각 객체는 자신의 좌표계에서 변환code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">4) 좌표계 변환: 각 객체는 자신의 좌표계에서 변환</code></h3>\n<p>모든 객체는 자신만의 좌표계를 가지고 있다. 부모 객체가 변형되더라도 자식 객체는 자신의 좌표계에서 이동,회전,크기 변환을 할 수 있다.\n이런 개념을 <code class=\"language-text\">좌표계 변환</code>이라고 하며, 개별 객체들이 자신의 좌표계를 기준으로 자유롭게 변형될 수 있다.\n각각의 객체가 자율적으로 움직일 수 있는 작은 무대를 가지고 있는 것이지만, 부모의 무대(좌표계)가 이동하면, 자식의 무대도 함께 이동하는 개념이다.</p>\n<h3 id=\"code-classlanguage-text5트래버설순회-씬의-모든-객체를-순회하며-렌더링code\" style=\"position:relative;\"><a href=\"#code-classlanguage-text5%ED%8A%B8%EB%9E%98%EB%B2%84%EC%84%A4%EC%88%9C%ED%9A%8C-%EC%94%AC%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%88%9C%ED%9A%8C%ED%95%98%EB%A9%B0-%EB%A0%8C%EB%8D%94%EB%A7%81code\" aria-label=\"code classlanguage text5트래버설순회 씬의 모든 객체를 순회하며 렌더링code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">5)트래버설(순회): 씬의 모든 객체를 순회하며 렌더링</code></h3>\n<p>트래버설은 Scene내에 있는 모든 객체들을 차례대로 방문하는 과정이다. <br/>\nThree.js는 Scene graph에 있는 객체들을 트리 구조로 관리하기에, 순회를 통해 모든 객체를 빠짐없이 확인하고, 필요한 경우 객체를 화면에 그려준다.</p>\n<h3 id=\"div-stylebackgroundffffcc-colorblack-padding7px-scene-graph-예제-코드div\" style=\"position:relative;\"><a href=\"#div-stylebackgroundffffcc-colorblack-padding7px-scene-graph-%EC%98%88%EC%A0%9C-%EC%BD%94%EB%93%9Cdiv\" aria-label=\"div stylebackgroundffffcc colorblack padding7px scene graph 예제 코드div permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><div style=\"background:#FFFFCC; color:black; padding:7px\"> Scene graph 예제 코드</div></h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 중앙 구체 생성</span>\n<span class=\"token keyword\">const</span> centralSphere <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>SphereGeometry</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>MeshBasicMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token number\">0xffaa00</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>centralSphere<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 위성 구체 생성</span>\n<span class=\"token keyword\">const</span> satellite <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Object3D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsatellite<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 위성을 중앙 구체에서 일정 거리 떨어뜨림</span>\ncentralSphere<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>satellite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> satelliteMesh <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>SphereGeometry</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>MeshBasicMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token number\">0x00aaff</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsatellite<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>satelliteMesh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>animate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 중앙 구체 자체를 회전</span>\n  centralSphere<span class=\"token punctuation\">.</span>rotation<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+=</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 위성 구체가 중앙 구체 주위를 공전하게 함</span>\n  satellite<span class=\"token punctuation\">.</span>rotation<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+=</span> <span class=\"token number\">0.05</span><span class=\"token punctuation\">;</span>\n\n  renderer<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">,</span> camera<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<img src=\"https://velog.velcdn.com/images/chloeee/post/a6e015be-02d8-456d-a34d-6e87570d4eb3/image.gif\" alt=\"img\" width=\"500px\" height=\"400px\">\n<p>이 예제에서 centralSphere는 자전하며 회전하고, satellite는 centralSphere를 중심으로 공전한다.<br/>\n이를 통해 부모-자식 관계가 중심 객체와 주위를 도는 객체의 움직임을 쉽게 표현할 수 있다는 것을 알 수 있다.</p>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://threejs.org/manual/#ko/scenegraph\">https://threejs.org/manual/#ko/scenegraph</a></li>\n<li>three.js journey강의</li>\n</ul>","frontmatter":{"title":"Three.js에서 renderer와 Scene Graph 이해하기","date":"November 09, 2024","image":"https://velog.velcdn.com/images/chloeee/post/c9eb947c-a3c0-4288-83f3-857c3c2bcc22/image.png"}}},"pageContext":{"slug":"/three.js/three.js_render_scene-graph/","previous":{"fields":{"slug":"/three.js/camera-in-three.js/"},"frontmatter":{"title":"Three.js에서의 카메라 이해하기"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}