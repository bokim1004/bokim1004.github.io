{"componentChunkName":"component---src-templates-blog-post-js","path":"/three.js/basic-scene/","result":{"data":{"site":{"siteMetadata":{"title":"웹 프론트 Deep dive 🐳","author":"chloe kim","siteUrl":"https://bokim1004.github.io","comment":{"disqusShortName":"https-bokim1004-github-io","utterances":"bokim1004/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"6ddd8817-26ad-52f6-8e97-2f05c891de4e","excerpt":"Three.js journey 강의를 듣고 공부한 것들을 기록합니다. First Scene scene을 만들기 위해서는 4개의 요소들이 필요합니다. object를 담을 scene objects camera renderer Scene scene은 컨테이너와 같습니다. object,model,particle,light등을 두게 되는 곳입니다.\nscene을 만들기 위해서는 아래와 같은 코드를 사용합니다. Objects Object…","html":"<blockquote>\n<p>Three.js journey 강의를 듣고 공부한 것들을 기록합니다.</p>\n</blockquote>\n<p align=\"center\">\n<img src=\"https://velog.velcdn.com/images/chloeee/post/c9eb947c-a3c0-4288-83f3-857c3c2bcc22/image.png\" width=\"550px\" height=\"390px\">\n</p>\n<h3 id=\"first-scene\" style=\"position:relative;\"><a href=\"#first-scene\" aria-label=\"first scene permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>First Scene</h3>\n<p>scene을 만들기 위해서는 4개의 요소들이 필요합니다.</p>\n<ol>\n<li>object를 담을 scene</li>\n<li>objects</li>\n<li>camera</li>\n<li>renderer</li>\n</ol>\n<h3 id=\"scene\" style=\"position:relative;\"><a href=\"#scene\" aria-label=\"scene permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scene</h3>\n<p>scene은 컨테이너와 같습니다. object,model,particle,light등을 두게 되는 곳입니다.\nscene을 만들기 위해서는 아래와 같은 코드를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Scene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"objects\" style=\"position:relative;\"><a href=\"#objects\" aria-label=\"objects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Objects</h3>\n<p>Object는 여러개일 수 있습니다. 기본 형상, 가져온 모델,원자,조명등일 수 있습니다.\n아주 심플한 red cube를 만들어봅시다.\nred cube를 만들기 위해서는 Mesh라는 이름의 object 타입을 만들어야 합니다.<br/>\n<code class=\"language-text\">Mesh</code>는 geometry(shape)와 material의 혼합입니다.</p>\n<p>다양한 종류의 geometry와 material이 있지만 아직은 심플하게 만들 것이기에 <code class=\"language-text\">BoxGeometry</code>와 <code class=\"language-text\">MeshBasicMaterial</code>을 만들어보겠습니다.<br/>\ngeometry를 만들기 위해 박스 사이즈에 상응하는 3개의 파라미터가 있는 <code class=\"language-text\">BoxGeometry</code>클래스를 사용히면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> geomtery <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>BoxGeometry</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>material을 만들기 위해서는 1개의 파라미터가 있는 <code class=\"language-text\">MeshBasicMaterial</code>클래스를 사용해봅시다.\n빨간색 큐브를 만들기 위해서 여기서 색상을 정해줄 수 있습니다.</p>\n<p>Three.js에서는 여러방법으로 색상을 지정해줄 수 있습니다.\nJS hexadecimal을 활용해 <code class=\"language-text\">0xff000</code>을 사용할 수도 있고 string hexadecimal <code class=\"language-text\">'#ff0000'</code>을 사용할 수도 있습니다. 컬러 이름 <code class=\"language-text\">'red'</code>라고 사용할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> geometry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>BoxGeometry</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> meterial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>MeshBasicMeterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token number\">0xff0000</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>마지막으로 Mesh를 만들기 위해서 <code class=\"language-text\">Mesh</code>클래스를 사용하고 geometry와 material을 파라미터로 보내면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> geometry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>BoxGeometry</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> meterial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>MeshBasicMeterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token number\">0xff0000</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> mesh <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>geometry<span class=\"token punctuation\">,</span> <span class=\"token function\">matchMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그 다음 이 scene에 mesh를 추가해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">scene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>mesh<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"camera\" style=\"position:relative;\"><a href=\"#camera\" aria-label=\"camera permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Camera</h3>\n<p>카메라는 실제로 보이는 것은 아닙니다. 이론적인 관점에 가깝다고 볼 수 있습니다.<br/>\nscene을 렌더할 때, 이는 카메라에서 보는 관점에서 화면에 나오게 됩니다.\n무비 세트에서처럼 여러개의 카메라를 가질 수도 있고 원하는대로 카메라들을 서로 바꿀 수 있습니다.</p>\n<p>camera를 만들기 위해서는 <code class=\"language-text\">PerspectiveCamera</code>클래스를 사용합니다.\n2개의 파라미터가 필요한데요.<br/>\n첫번째는 <code class=\"language-text\">The field of view</code>입니다. 이는 시야의 앵글이 얼마나 큰지를 의미합니다.<br/>\n큰 앵글을 사용하면 다양한 방향에서 한번에 볼 수 있지만 결과가 작은 사각형에 그려지기에 왜곡이 있을 수 있습니다.<br/>\n작은 앵글을 사용하면 줌인한 것처럼 보이게 될 것입니다. The field of view는 한마디로 각도로 표시되며 수직 시야각에 해당합니다.<br/>\n다음 파라미터는 <code class=\"language-text\">The aspect ratio</code>입니다. 이는 높이에서 캔버스의 넓이를 나눈 값이라고 볼 수 있습니다.\n코드를 한번 봐보면 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//sizes</span>\n<span class=\"token keyword\">const</span> sizes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Camera</span>\n<span class=\"token keyword\">const</span> camera <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>PerspectiveCamera</span><span class=\"token punctuation\">(</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> sizes<span class=\"token punctuation\">.</span>width <span class=\"token operator\">/</span> sizes<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>\nscene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>camera<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"renderer\" style=\"position:relative;\"><a href=\"#renderer\" aria-label=\"renderer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Renderer</h3>\n<p>renderer의 역할은 렌더를 하기 위함입니다.\nrenderer를 만들기 위해서는 <code class=\"language-text\">WebGLRenderer</code>클래스와 1개의 파라미터를 사용합니다.\n그리고 스크립트를 로드하기 전에 canvas 요소를 하나 만듭니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>canvas <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'webgl'</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>canvas<span class=\"token operator\">></span></code></pre></div>\n<p>canvas 변수를 하나 만들어 이 element에서 가져오고 저장할 수 있게합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas.webgl'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그리고 <code class=\"language-text\">setSize</code>를 통해 캔버스 사이즈를 자동적으로 resize할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>WebGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">canvas</span><span class=\"token operator\">:</span> canvas<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nrenderer<span class=\"token punctuation\">.</span><span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span>sizes<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> sizes<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span></code></pre></div>\n<p>render방법을 통해 렌더가 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">renderer<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">,</span> camera<span class=\"token punctuation\">)</span></code></pre></div>\n<p>그 다음으로 물체의 위치를 구체화해줘야 합니다.\nscene의 가운데 있지만 물체가 그 내부에 있기에 보이지 않습니다.\nThree.js는 z축을 앞면과 뒷면의 축으로 생각합니다.\ncamera를 뒷면으로 옮기려면 속성에 양수 값을 주어야 합니다.\n아래 코드를 봐봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> camera <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>PerspectiveCamera</span><span class=\"token punctuation\">(</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> sizes<span class=\"token punctuation\">.</span>width <span class=\"token operator\">/</span> sizes<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>\ncamera<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\nscene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>camera<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"결과\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC\" aria-label=\"결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과</h3>\n<p>아래와 같이 red cube가 화면에 뜨게 됩니다!</p>\n<p>\n<img src=\"https://velog.velcdn.com/images/chloeee/post/0030aaa4-f09c-4355-9855-319a2b25c1c7/image.png\" width=\"500px\" alt=\"imgs\">\n</p>\n<h3 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h3>\n<p>아주 단순한 red cube를 만드는데 생각보다 많은 클래스들이 쓰이고 각기 다른 parameter들의 값을 넣어줘야해서 헷갈리는 부분들이 많았던 것 같습니다.\n여러번 계속 반복하며 이런 three.js 클래스에 익숙해지는 시간을 더 가져봐야할 것 같네요 🥲</p>","frontmatter":{"title":"Three.js journey |  basic scene","date":"May 01, 2023","image":"https://velog.velcdn.com/images/chloeee/post/c9eb947c-a3c0-4288-83f3-857c3c2bcc22/image.png"}}},"pageContext":{"slug":"/three.js/basic-scene/","previous":{"fields":{"slug":"/react/sentry/"},"frontmatter":{"title":"SENTRY로 프론트 에러 잡아내기"}},"next":{"fields":{"slug":"/three.js/transform-objects/"},"frontmatter":{"title":"Three.js journey | transform objects"}}}},"staticQueryHashes":["2486386679","3128451518"]}