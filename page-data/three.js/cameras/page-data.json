{"componentChunkName":"component---src-templates-blog-post-js","path":"/three.js/cameras/","result":{"data":{"site":{"siteMetadata":{"title":"chloe's tech blog","author":"chloe kim","siteUrl":"https://bokim1004.github.io","comment":{"disqusShortName":"https-bokim1004-github-io","utterances":"bokim1004/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"17875a5a-8e5f-5382-9ed5-6e0ab3bb5de0","excerpt":"Three.js journey 강의를 듣고 공부한 것들을 기록합니다. Three.js 카메라 종류 1. Camera 카메라는 `abstract class로 직접적으로 사용되지는 않습니다. 2. Array Camera 는 특정 area에서, 여러개의 카메라에서 scene을 렌더할 때 사용됩니다.\n각 카메라는 canvas의 특정 area를 렌더할 것입니다. 3. Stereo Camera 는 눈과 비슷합니다. 2개의 카메라를 통해 scene을 렌더합니다. 왼쪽 눈은 특정…","html":"<blockquote>\n<p>Three.js journey 강의를 듣고 공부한 것들을 기록합니다.</p>\n</blockquote>\n<p align=\"center\">\n<img src=\"https://velog.velcdn.com/images/chloeee/post/c9eb947c-a3c0-4288-83f3-857c3c2bcc22/image.png\" width=\"400px\" height=\"330px\">\n</p>\n<h3 id=\"threejs-카메라-종류\" style=\"position:relative;\"><a href=\"#threejs-%EC%B9%B4%EB%A9%94%EB%9D%BC-%EC%A2%85%EB%A5%98\" aria-label=\"threejs 카메라 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Three.js 카메라 종류</h3>\n<h3 id=\"1-camera\" style=\"position:relative;\"><a href=\"#1-camera\" aria-label=\"1 camera permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Camera</h3>\n<p>카메라는 `abstract class로 직접적으로 사용되지는 않습니다.</p>\n<h3 id=\"2-array-camera\" style=\"position:relative;\"><a href=\"#2-array-camera\" aria-label=\"2 array camera permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Array Camera</h3>\n<p><code class=\"language-text\">ArrayCamera</code>는 특정 area에서, 여러개의 카메라에서 scene을 렌더할 때 사용됩니다.\n각 카메라는 canvas의 특정 area를 렌더할 것입니다.</p>\n<h3 id=\"3-stereo-camera\" style=\"position:relative;\"><a href=\"#3-stereo-camera\" aria-label=\"3 stereo camera permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Stereo Camera</h3>\n<p><code class=\"language-text\">StereoCamera</code>는 눈과 비슷합니다. 2개의 카메라를 통해 scene을 렌더합니다. 왼쪽 눈은 특정 1개의 카메라를 볼 때 오른 쪽 눈은 다른 특정 1개의 카메라를 봅니다. 이 2개의 카메라를 통해 Scene을 렌더합니다.\nVR 헤드셋 같은 디바이스를 사용할 때 사용됩니다.</p>\n<h3 id=\"4cube-camera\" style=\"position:relative;\"><a href=\"#4cube-camera\" aria-label=\"4cube camera permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.Cube Camera</h3>\n<p>6개 render(forward, backward, leftward, rightward, upward, and downward) 를 하며 각각 다른 방향을 마주합니다. 이는 환경 map이나 shadow, reflection같은 것을 렌더할 수 있습니다.</p>\n<h3 id=\"5-orthographic-camera\" style=\"position:relative;\"><a href=\"#5-orthographic-camera\" aria-label=\"5 orthographic camera permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Orthographic Camera</h3>\n<p>카메라 거리에 상관없이 scene을 렌더할 수 있습니다.\n캐릭터가 멀리 가도 크기는 항상 동일함을 유지하게 합니다.<br/>\n이는 2D Scene이나 UI elements를 렌더할 때 사용될 수 있습니다.\n<code class=\"language-text\">Orthographic Camera</code>는 <code class=\"language-text\">Perspective Camera</code>보다 perspective가 부족하다는 점이 다릅니다.\n물체는 카메라의 거리에 상관없이 항상 같은 사이즈를 가집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> camera <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>OrthographicCamera</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>parameter값은 각 방향에서(left,right,top,bottom) 얼마나 먼 거리에 있는 카메라가 볼 수 있는지에 대한 값을 제공합니다.</p>\n<h3 id=\"6-perspective-camera\" style=\"position:relative;\"><a href=\"#6-perspective-camera\" aria-label=\"6 perspective camera permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Perspective Camera</h3>\n<p>인간의 눈이 이동하는 방향대로 렌더가 될 수 있습니다. 이는 3D Scene에서 제일 많이 사용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> camera <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Three<span class=\"token punctuation\">.</span>PersepectiveCamera</span><span class=\"token punctuation\">(</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span>sizes<span class=\"token punctuation\">.</span>width<span class=\"token operator\">/</span>sizes<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>첫번 째 parameter에 있는 값은 <code class=\"language-text\">Field of view</code>입니다.\n이는 각도이고 수직의 vision angle을 뜻합니다. 75를 가장 추천합니다.</p>\n<p>두번 째 parameter값은 <code class=\"language-text\">Aspect Ratio</code>입니다.\nrender가 되는 부분의 height에서 width를 나눈 값입니다.</p>\n<p>세번째,네번째 parameter값은 near,far라고 불립니다. 얼마나 가까이 있는 그리고 멀리있는 카메라가 물체를 볼 수 있는지에 대한 값과 상응합니다.</p>\n<p><code class=\"language-text\">0.0001</code>이나 <code class=\"language-text\">999999</code> 같이 극단적인 값은 z-fighting을 방지하기 위해 사용하지 않는 것이 좋다고 합니다.</p>\n<h4 id=\"cursor\" style=\"position:relative;\"><a href=\"#cursor\" aria-label=\"cursor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cursor</h4>\n<p>const cursor= {\nx:0,\ny:0\n}</p>\n<p>window.addEventListner(‘mousemove’,(event) =>{\n// -0.5붙이면 render화면에서 -0.5에서 0.5까지 값이 나온다.\ncursor.x = event.clientX /sizes.width - 0.5\ncursor.y= -(event.clientY/sizes.height -0.5)\n})\n// 콘솔찍어보면 커서위치를 확인할 수 있다.</p>\n<p>cursor coordinates로 tick function안에 camera position을 업데이트 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">tick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    \n    <span class=\"token comment\">//update camera</span>\n    <span class=\"token comment\">//커서를 움직일 때마다 카메라가 업데이트 되므로 물체가 커서따라 움직인다.</span>\n    camera<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span><span class=\"token number\">3</span>\n    camera<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span><span class=\"token number\">3</span>\n    camera<span class=\"token punctuation\">.</span><span class=\"token function\">lookAt</span><span class=\"token punctuation\">(</span>mesh<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"built-in-controls\" style=\"position:relative;\"><a href=\"#built-in-controls\" aria-label=\"built in controls permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Built-in controls</h3>\n<p>three.js 문서를 보면 많은 controls들을 확인할 수 있습니다.</p>\n<ol>\n<li>Device Orientation Controls</li>\n</ol>\n<p>이것은 OS,브러우저가 허용하면 디바이스의 방향을 자동적으로 찾고 카메라를 회전하게 합니다.\nimmersive universe, VR같은 것에 사용될 수 있습니다.\nios는 지원을 중단했다고 합니다.</p>\n<ol start=\"2\">\n<li>Fly Controls</li>\n</ol>\n<p>우주에 있는 것처럼 카메라를 움직일 수 있습니다. 3개의 축 모두  앞뒤 회전이 가능합니다.</p>\n<ol start=\"3\">\n<li>First Person Controls</li>\n</ol>\n<p>이것은 Fly controls와 비슷하지만 축을 고정한다는 점이 다릅니다. (upside down이 안됩니다.)</p>\n<ol start=\"4\">\n<li>Pointer Lock Controls</li>\n</ol>\n<p>이것은 javascript API인 pointer lock을 사용합니다. <br/>\n이 API는 cursor를 감추고 중앙에 유지하여 Mousemove 이벤트 콜백에서 움직임을 보냅니다.\n이 API를 사용하면 브라우저내에서 바로 FPS 게임을 만들 수 있습니다.</p>\n<ol start=\"5\">\n<li>Orbit Controls</li>\n</ol>\n<p>orbit controls은 매우 간단하고 쉽습니다.\n왼쪽 마우스로 한 지점을 회전하고 오른쪽으로는 옆으로 이동하고, 휠을 사용하여 확대 또는 축소할 수 있습니다.</p>\n<ol start=\"6\">\n<li>Trackball Controls</li>\n</ol>\n<p>Trackball Controls는 orbit contorls와 비슷하지만  수직 각도에 제한이 없습니다. 장면이 거꾸로 되더라도 계속 회전할 수 있습니다.</p>\n<h3 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h3>\n<p>이번엔 three.js에서 사용되는 카메라의 종류와 control 종류에 대해 알아보았는데요.\n실제 예시 영상을 보면서 각 카메라들이 어떻게 동작을 하는지 알 수 있어서 좋았습니다!\n강의를 하시는 분이 주로 사용하시는 카메라를 접하게 될 것 같긴 하지만,\n나중에 three.js문서를 보며 더 깊이있는 공부를 해야할 것 같네요-!</p>","frontmatter":{"title":"Three.js journey | Cameras","date":"June 19, 2023","image":"https://velog.velcdn.com/images/chloeee/post/c9eb947c-a3c0-4288-83f3-857c3c2bcc22/image.png"}}},"pageContext":{"slug":"/three.js/cameras/","previous":{"fields":{"slug":"/etc/cookie,session,cache/"},"frontmatter":{"title":"cookie,session,cache"}},"next":{"fields":{"slug":"/react/react-query/"},"frontmatter":{"title":"React query"}}}},"staticQueryHashes":["2486386679","3128451518"]}