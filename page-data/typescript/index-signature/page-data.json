{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/index-signature/","result":{"data":{"site":{"siteMetadata":{"title":"프론트엔드 로그 by 굥 🐳","author":"굥","siteUrl":"https://bokim1004.github.io","comment":{"disqusShortName":"https-bokim1004-github-io","utterances":"bokim1004/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"ebac26e9-a9cf-5aa0-904c-9209f980d315","excerpt":"이펙티브 타입스크립트를 읽고 공부한 것을 기록합니다. 자바스크립트의 장점 중 하나는 바로 객체를 생성하는 문법이 간단하다는 것이다. 자바스크립트 객체는 문자열 키를 타입의 값에 관계없이 매핑한다.\n타입스크립트에서는 타입에 를 명시하여 유연하게 매핑을 표현할 수 있다. 이 인덱스 시그니처이며 다음 세 가지 의미를 가지고 있다.  : 키의 위치만 표시하는 용도이다. 타입 체커에서는 사용하지 않기에 무시할 수 있는 참고 정보이다.\n : string이나 number 또는 symbol…","html":"<blockquote>\n<p>이펙티브 타입스크립트를 읽고 공부한 것을 기록합니다.</p>\n</blockquote>\n<p>자바스크립트의 장점 중 하나는 바로 객체를 생성하는 문법이 간단하다는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> rocket <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Falcon 9'</span><span class=\"token punctuation\">,</span>\n  variant<span class=\"token operator\">:</span> <span class=\"token string\">'Block 5'</span><span class=\"token punctuation\">,</span>\n  thrust<span class=\"token operator\">:</span> <span class=\"token string\">'7,067 KN'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자바스크립트 객체는 문자열 키를 타입의 값에 관계없이 매핑한다.\n타입스크립트에서는 타입에 <code class=\"language-text\">인덱스 시그니처</code>를 명시하여 유연하게 매핑을 표현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Rocket</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>property<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> rocket<span class=\"token operator\">:</span> Rocket <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Falcon 9'</span><span class=\"token punctuation\">,</span>\n  variant<span class=\"token operator\">:</span> <span class=\"token string\">'Block 5'</span><span class=\"token punctuation\">,</span>\n  thrust<span class=\"token operator\">:</span> <span class=\"token string\">'7,067 KN'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n<p><code class=\"language-text\">[property:string] :string</code>이 인덱스 시그니처이며 다음 세 가지 의미를 가지고 있다.</p>\n<p><code class=\"language-text\">키의 이름</code> : 키의 위치만 표시하는 용도이다. 타입 체커에서는 사용하지 않기에 무시할 수 있는 참고 정보이다.\n<code class=\"language-text\">키의 타입</code> : string이나 number 또는 symbol의 조합이어야 하지만, 보통은 string을 사용한다.\n<code class=\"language-text\">값의 타입</code>: 어떤 것이든 될 수 있다.</p>\n<p>이렇게 타입 체크가 수행되면 네가지 단점이 드러난다.</p>\n<ol>\n<li>잘못된 키를 포함해 모든 키를 허용한다. name대신 Name으로 작성해도 유요한 Rocket타입이 된다.</li>\n<li>특정 키가 필요하지 않다. {}도 유효한 Rocket타입이다.</li>\n<li>키마다 다른 타입을 가질 수 없다. 예를 들어 thrust는 string이 아니라 number여야할 수도 있다.</li>\n<li>타입스크립트 언어 서비스는 다음과 같은 경우에 도움이 되지 못한다. name:을 입력할 때, 키는 무엇이든 가능하기에 자동완성 기능이 동작하지 않는다.</li>\n</ol>\n<p>결론적으로 인덱스 시그니처는 부정확하므로 더 나은 방법을 찾아야 한다.\n<code class=\"language-text\">인덱스 시그니처</code>는 동적 데이터를 표현할 떄 사용한다.\n예를 들어 CSV파일처럼 행과 열에 이름이 있고 데이터행을 열 이름과 값으로 매핑하는 객체로 나타내고 싶은 경우이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseCSV</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>columName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> lines <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>header<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rows<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lines\n  <span class=\"token keyword\">const</span> headerColumns <span class=\"token operator\">=</span> header<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rowStr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> row<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>columnName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    rowStr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      row<span class=\"token punctuation\">[</span>headerColumns<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cell\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> row\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>일반적으로 열 이름이 무엇인지 미리 알 방법은 없다. 이럴 때는 인덱스 시그니처를 사용한다.\n반면에 열 이름을 알고 있는 특정한 상황에 parseCSV가 사용된다면 미리 선언해둔 타입으로 단언문을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ProductRow</span> <span class=\"token punctuation\">{</span>\n  productId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  price<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> csvData<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">const</span> products <span class=\"token operator\">=</span> <span class=\"token function\">parseCSV</span><span class=\"token punctuation\">(</span>csvData<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">unknown</span> <span class=\"token keyword\">as</span> productRow<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>아래의 예시를 한번 봐보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Row1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>column<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 너무 광범위</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Row2</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  b<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  c<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  d<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 최선</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Row3</span> <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> c<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> c<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> d<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 가장 정확하지만 사용하기 번거로움</span></code></pre></div>\n<p>string타입이 너무 광범위해서 인덱스 시그니처를 사용하는데 문제가 있다면 두 가지 다른 대안을 생각해 볼 수 있다.</p>\n<p>첫 번째, <code class=\"language-text\">Record를 사용하는 방법</code>이다. Record는 키 타입에 유연성을 제공하는 제너릭타입이다.\n특히 string의 부분 집합을 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Vec3D</span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span><span class=\"token string\">'x'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'y'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\nType Vec3D <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  z<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>두 번째, 매핑된 타입을 사용하는 방법이다. 매핑된 타입은 키마다 별도의 타입을 사용하게 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Vec3D</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> <span class=\"token string\">'x'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'y'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nType Vec3D <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  z<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">ABC</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> k <span class=\"token keyword\">extends</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nType <span class=\"token constant\">ABC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  b<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  c<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h4>\n<ul>\n<li>런타임 때까지 객체의 속성을 알 수 없을 경우에만 (예를들어 CSV파일에서 로드하는 경우) 인덱스 시그니처를 사용하도록 한다.</li>\n<li>안전한 접근을 위해 인덱스 시그니처의 값 타입에 undefined를 추가하는 것을 고려해야 한다.</li>\n<li>가능하다면 인터페이스, Record, 매핑된 타입같은 인덱스 시그니처보다 정확한 타입을 사용하는 것이 좋다.</li>\n</ul>","frontmatter":{"title":"동적 데이터에 인덱스 시그니처 사용하기","date":"November 13, 2022","image":"https://velog.velcdn.com/images/chloeee/post/39563e2c-9400-4099-b125-7382c076ae1d/image.png"}}},"pageContext":{"slug":"/typescript/index-signature/","previous":{"fields":{"slug":"/typescript/typescript-generic/"},"frontmatter":{"title":"타입 연산과 제너릭 사용으로 반복을 줄이기"}},"next":{"fields":{"slug":"/javascript/promise_and_async-await/"},"frontmatter":{"title":"Promise와 async await"}}}},"staticQueryHashes":["2486386679","3128451518"]}