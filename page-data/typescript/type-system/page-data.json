{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/type-system/","result":{"data":{"site":{"siteMetadata":{"title":"Chloebo.io","author":"chloe bo kim","siteUrl":"https://bokim1004.github.io","comment":{"disqusShortName":"https-bokim1004-github-io","utterances":"bokim1004/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"9eb0eabb-aadc-57c9-9ab6-13f681ee8b80","excerpt":"타입스크립트는 코드를 자바스크립트로 변환하는 역할도 하지만 가장 중요한 역할은 에 있다. 타입이 값들의 집합이라고 생각하기 런타임에 모든 변수는 자바스크립트 세상의 값으로부터 정해지는 각자의 고유한 값을 가진다.\n변수에는 다음처럼 다양한 종류의 값을 할당할 수 있다.\n그러나 코드가 실행되기 전, 즉 타입스크립트가 오류를 체크하는 순간에는 \n이 타입이다. 가장 작은 집합은 아무 값도 포함하지 않는 공집합이며, 타입스크립트에서는 이다.\nnever…","html":"<p>타입스크립트는 코드를 자바스크립트로 변환하는 역할도 하지만 가장 중요한 역할은 <code class=\"language-text\">타입 시스템</code>에 있다.</p>\n<h3 id=\"타입이-값들의-집합이라고-생각하기\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%9D%B4-%EA%B0%92%EB%93%A4%EC%9D%98-%EC%A7%91%ED%95%A9%EC%9D%B4%EB%9D%BC%EA%B3%A0-%EC%83%9D%EA%B0%81%ED%95%98%EA%B8%B0\" aria-label=\"타입이 값들의 집합이라고 생각하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입이 값들의 집합이라고 생각하기</h3>\n<p>런타임에 모든 변수는 자바스크립트 세상의 값으로부터 정해지는 각자의 고유한 값을 가진다.\n변수에는 다음처럼 다양한 종류의 값을 할당할 수 있다.\n그러나 코드가 실행되기 전, 즉 타입스크립트가 오류를 체크하는 순간에는 <code class=\"language-text\">타입을 가지고 있다.</code>\n<code class=\"language-text\">할당가능한 값들의 집합</code>이 타입이다.</p>\n<p>가장 작은 집합은 아무 값도 포함하지 않는 공집합이며, 타입스크립트에서는 <code class=\"language-text\">never 타입</code>이다.\nnever타입으로 선언된 변수의 범위는 공집합이기에 아무런 값도 할당할 수 없다.</p>\n<p>그 다음으로 작은 집합은 한 가지 값만 포함하는 타입이다. 이들은 타입스크립트에서는 유닛타입이라고도 불리는 리터럴 타입이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Twelve</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span></code></pre></div>\n<p>두 개 혹은 세 개로 묶으려면 유니온 타입을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">AB</span></span> <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'B'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">AB12</span></span> <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'B'</span> <span class=\"token operator\">|</span> <span class=\"token number\">12</span></code></pre></div>\n<p><code class=\"language-text\">&amp;연산자</code>는 두 타입의 인터섹션(교집합)을 계산한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Lifespan</span> <span class=\"token punctuation\">{</span>\n  birth<span class=\"token operator\">:</span> Date\n  death<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Date\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonSpan</span> <span class=\"token operator\">=</span> Person <span class=\"token operator\">&amp;</span> Lifespan</code></pre></div>\n<p>언뜻 보기에 Person과 Lifespan 인터페이스는 공통으로 가지는 속성이 없기에 PersonSpan의 타입을 공집합(never타입)으로 예상하기 쉽다.\n그러나 타입 연산자는 인터페이스의 속성이 아닌 , 값의 집합(타입의 범위)에 적용된다.\n그래서 Person과 Lifespan 둘다 가지는 값은 인터섹션 타입에 속하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> ps<span class=\"token operator\">:</span> PersonSpan <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'david'</span><span class=\"token punctuation\">,</span>\n  birth<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1912/04/04'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  death<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1954/04/02'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>당연히 앞의 세 가지보다 더 많은 속성을 가지는 값도 PersonSpan타입에 속한다.\n<code class=\"language-text\">인터섹션 타입의 값은 각 타입 내의 속성을 모두 포함하는 것이 일반적인 규칙이다</code>\n조금 더 일반적으로 PersonSpan 타입을 선언하는 방법은 <code class=\"language-text\">extends 키워드</code>를 쓰는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonSpan</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  birth<span class=\"token operator\">:</span> Date\n  death<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Date\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h3 id=\"타입-단언보다는-타입-선언을-사용하기\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EB%8B%A8%EC%96%B8%EB%B3%B4%EB%8B%A4%EB%8A%94-%ED%83%80%EC%9E%85-%EC%84%A0%EC%96%B8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"타입 단언보다는 타입 선언을 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 단언보다는 타입 선언을 사용하기</h3>\n<p>타입스크립트에서 변수에 값을 할당하고 타입을 부여하는 방법은 두 가지이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> alice<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Alice'</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">//타입은 Person</span>\n<span class=\"token keyword\">const</span> bob <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'BoB'</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Person <span class=\"token comment\">//타입은 Person</span></code></pre></div>\n<p>이 두 가지 방법은 결과가 같아 보이지만 그렇지 않다.\n첫 번째 <code class=\"language-text\">alice:Person</code>은 변수에 타입선언을 붙여서 그 값이 <code class=\"language-text\">선언된 타입</code>임을 명시한다.\n두 번째 <code class=\"language-text\">as Person</code>은 타입 단언을 수행한다. 그러면 타입스크립트가 추론한 타입이 있더라도 Person타입으로 간주한다.\n** 타입 단언보다 타입 선언을 사용하는 게 낫다.**</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> alice<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Person유형에 필요한 name속성이  {}유형에 없습니다.</span>\n<span class=\"token keyword\">const</span> bob <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Person\n<span class=\"token comment\">// 오류 없음</span></code></pre></div>\n<p>타입 선언은 할당되는 값이 해당 인터페이스를 만족하는지 검사한다. 타입 단언은 강제로 타입을 지정했으니 타입 체커에게 오류를 무시하라고 하는 것이다.\n타입 선언과 타입 단언의 차이는 속성을 추가할 때도 마찬가지다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> alice<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span><span class=\"token string\">'alice'</span><span class=\"token punctuation\">,</span>\n  occupation<span class=\"token operator\">:</span>'developer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 개체 리터럴은 알려진 속성만 지정할 수 있으며 Person형식에 occupation이 없습니다.</span>\n<span class=\"token keyword\">const</span> bob <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span><span class=\"token string\">'bob'</span><span class=\"token punctuation\">,</span>\n  occupation<span class=\"token operator\">:</span><span class=\"token string\">'developer'</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Person\n<span class=\"token comment\">// 오류 없음</span></code></pre></div>\n<p>타입 단언이 꼭 필요한 경우가 아니라면, 안전성 체크도 되는 타입 선언을 사용하는 것이 좋다.</p>\n<hr>\n<h3 id=\"함수-표현식에-타입-적용하기\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9D%EC%97%90-%ED%83%80%EC%9E%85-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"함수 표현식에 타입 적용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 표현식에 타입 적용하기</h3>\n<p>자바스크립트와 타입스크립트에서는 함수 문장(statement)과 함수 표현식(expression)을 다르게 인식한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">//문장</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">rollDice1</span><span class=\"token punctuation\">(</span>sides<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//~~</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//표현식</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rollDice2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>sides<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//~~</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//표현식</span>\n<span class=\"token keyword\">const</span> rollDice3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sides<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>타입스크립트에서는 <code class=\"language-text\">함수 표현식</code>을 사용하는 것이 좋다. 함수의 매개변수부터 반환값까지 전체를 함수 타입으로 선언하여 함수 표현식에 재 사용할 수 있다는 장점이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">DiceRollFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sides<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span>\n<span class=\"token keyword\">const</span> rollDice<span class=\"token operator\">:</span> <span class=\"token function-variable function\">DiceRollFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sides<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수 타입의 선언은 불필요한 코드의 반복을 줄인다. 사칙 연산을 하는 함수 네개는 다음과 같이 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">div</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>반복되는 함수 시크니처를 하나의 함수 타입으로 통합할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">BinaryFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span>\n<span class=\"token keyword\">const</span> add<span class=\"token operator\">:</span> <span class=\"token function-variable function\">BinaryFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b\n<span class=\"token keyword\">const</span> sub<span class=\"token operator\">:</span> <span class=\"token function-variable function\">BinaryFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b\n<span class=\"token keyword\">const</span> mul<span class=\"token operator\">:</span> <span class=\"token function-variable function\">BinaryFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">*</span> b\n<span class=\"token keyword\">const</span> div<span class=\"token operator\">:</span> <span class=\"token function-variable function\">BinaryFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">/</span> b</code></pre></div>\n<p><code class=\"language-text\">매개변수나 반환 값에 타입을 명시하기보다 함수 표현식 전체에 타입 구문을 적용하는 것이 좋다.</code><br/>\n위 형식의 타입 구문 적용은 처음봤는데 다음에 꼭 적용해봐야겠다.</p>\n<hr>","frontmatter":{"title":"타입스크립트의 타입 시스템1","date":"November 06, 2022"}}},"pageContext":{"slug":"/typescript/type-system/","previous":{"fields":{"slug":"/etc/s3,cloundfront,ec2/"},"frontmatter":{"title":"S3,CloundFront,EC2"}},"next":{"fields":{"slug":"/typescript/interface-and-type/"},"frontmatter":{"title":"타입과 인터페이스의 차이점 알기"}}}},"staticQueryHashes":["2486386679","3128451518"]}