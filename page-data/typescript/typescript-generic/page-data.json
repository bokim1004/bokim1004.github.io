{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/typescript-generic/","result":{"data":{"site":{"siteMetadata":{"title":"Chloebo.io","author":"chloe bo kim","siteUrl":"https://bokim1004.github.io","comment":{"disqusShortName":"https-bokim1004-github-io","utterances":"bokim1004/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"97148405-0cd8-5a79-975c-da909ba07d2b","excerpt":"타입 연산과 제너릭 사용으로 반복을 줄이기 타입 중복은 코드 중복만큼 많은 문제를 일으킨다. 만약에 선택적 필드인 middleName을 Person에 추가한다고 가정해보자.\n그러면 Person과 PersonWithBirthDate은 다른 타입이 된다. 위 예제에서는 한 인터페이스가 다른 인터페이스를 확장하게 해서 반복을 제거하게 한다. 다음 예시로는 전체 애플리케이션의 상태를 표현하는 State타입과 단지 부분만 표현하는 TopNavState가 있는 경우가 있다. TopNavState…","html":"<h3 id=\"타입-연산과-제너릭-사용으로-반복을-줄이기\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EC%97%B0%EC%82%B0%EA%B3%BC-%EC%A0%9C%EB%84%88%EB%A6%AD-%EC%82%AC%EC%9A%A9%EC%9C%BC%EB%A1%9C-%EB%B0%98%EB%B3%B5%EC%9D%84-%EC%A4%84%EC%9D%B4%EA%B8%B0\" aria-label=\"타입 연산과 제너릭 사용으로 반복을 줄이기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 연산과 제너릭 사용으로 반복을 줄이기</h3>\n<p>타입 중복은 코드 중복만큼 많은 문제를 일으킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonWithBirthDate</span> <span class=\"token punctuation\">{</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  birth<span class=\"token operator\">:</span> Date\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약에 선택적 필드인 middleName을 Person에 추가한다고 가정해보자.\n그러면 Person과 PersonWithBirthDate은 다른 타입이 된다.</p>\n<p>위 예제에서는 한 인터페이스가 다른 인터페이스를 확장하게 해서 반복을 제거하게 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonWithBirthDate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  birth<span class=\"token operator\">:</span> Date\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음 예시로는 전체 애플리케이션의 상태를 표현하는 State타입과 단지 부분만 표현하는 TopNavState가 있는 경우가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  pageTitle<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  recentFiles<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  pageContents<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TopNavState</span> <span class=\"token punctuation\">{</span>\n  userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  pageTitle<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  recentFiles<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>TopNavState를 확장하여 State를 구상하기 보다, State의 부분 집합으로 TopNavState를 정의하는 것이 바람직해 보인다.\n이 방법이 전체 앱의 상태를 하나의 인터페이스로 유지할 수 있게 해준다.\n<code class=\"language-text\">state를 인덱싱하여 속성의 타입에서 중복을 제거할 수 있다.</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TopNavState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  userId<span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span><span class=\"token string\">'userId'</span><span class=\"token punctuation\">]</span>\n  pageTitle<span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span><span class=\"token string\">'pageTitle'</span><span class=\"token punctuation\">]</span>\n  recentFiles<span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span><span class=\"token string\">'recentFiles'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>State내의 pageTitle이 바뀌면 TopNavState에서도 반영된다. 그러나 여전히 반복되는 코드가 존재한다.\n이 때 ‘매핑된 타입’을 사용하면 좀 더 나아진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TopNavState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> <span class=\"token string\">'userId'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'pageTitle'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'recentFiles'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>매핑된 타입은 배열의 필드를 루프도는 것과 같은 방식이다.</p>\n<p>정의가 완전하지는 않지만 다음과 같이 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TopNavState</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>State<span class=\"token punctuation\">,</span> <span class=\"token string\">'userId'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'pageTitle'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'recentFiles'</span><span class=\"token operator\">></span></code></pre></div>\n<p>여기서 Pick은 제너릭 타입이다.\n중복된 코드를 없앤다는 관점에서 pick을 사용하는 것은 함수를 호출하는 것에 비유할 수 있다.\n마치 함수에서 두 개의 매개변수 값을 받아서 결괏값을 반환하는 것처럼 Pick은 T,K 2가지 타입을 받아서 결과 타입을 반환한다.</p>\n<p>태그된 유니온에서도 다른 형태의 중복이 발생할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SaveAction</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'save'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">LoadAction</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'load'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Action</span> <span class=\"token operator\">=</span> SaveAction <span class=\"token operator\">|</span> LoadAction\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ActionType</span> <span class=\"token operator\">=</span> <span class=\"token string\">'save'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'load'</span> <span class=\"token comment\">//타입 반복</span></code></pre></div>\n<p>Action유니온을 인덱싱하면 타입 반복없이 ActionType을 정의할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ActionType</span> <span class=\"token operator\">=</span> Action<span class=\"token punctuation\">[</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span><span class=\"token string\">'; // 타입은 '</span>save<span class=\"token string\">' | '</span>load'<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Action 유니온에 타입을 더 추가하면 ActionType은 자동적으로 그 타입을 포함한다.\nActionType은 Pick을 사용해 얻게되는 type속성을 가지는 인터페이스와는 다르다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ActionRec</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Action<span class=\"token punctuation\">,</span> <span class=\"token string\">'type'</span><span class=\"token operator\">></span> <span class=\"token comment\">// {type:\"save\" |\"load\"}</span></code></pre></div>","frontmatter":{"title":"타입 연산과 제너릭 사용으로 반복을 줄이기","date":"November 10, 2022"}}},"pageContext":{"slug":"/typescript/typescript-generic/","previous":{"fields":{"slug":"/typescript/interface-and-type/"},"frontmatter":{"title":"타입과 인터페이스의 차이점 알기"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}