{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/interface-and-type/","result":{"data":{"site":{"siteMetadata":{"title":"Chloebo.io","author":"chloe bo kim","siteUrl":"https://bokim1004.github.io","comment":{"disqusShortName":"https-bokim1004-github-io","utterances":"bokim1004/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"93d3960b-002c-56bc-a58c-b13bde2ddc10","excerpt":"타입과 인터페이스의 차이점 알기 타입스크립트에서 명명된 타입을 정의하는 방법은…","html":"<h3 id=\"타입과-인터페이스의-차이점-알기\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EA%B3%BC-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90-%EC%95%8C%EA%B8%B0\" aria-label=\"타입과 인터페이스의 차이점 알기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입과 인터페이스의 차이점 알기</h3>\n<p>타입스크립트에서 명명된 타입을 정의하는 방법은 2가지가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Tstate</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  capital<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Istate</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  capital<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>대부분의 경우에는 타입을 사용해도 되고 인터페이스를 사용해도 된다.\n그러나 타입과 인터페이스의 차이를 분명히 알고 같은 상황에서는 동일한 방법으로 명명된 타입을 정의해 일관성을 유지해야 한다.</p>\n<p><strong>인터페이스 선언과 타입선언의 비슷한 점은 무엇일까?</strong></p>\n<ul>\n<li>인덱스 시그니처는 인터페이스와 타입에서 모두 사용할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TDict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IDict</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>함수 타입도 인터페이스나 타입으로 정의할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFn</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> toStrT<span class=\"token operator\">:</span> <span class=\"token function-variable function\">TFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">''</span> <span class=\"token operator\">+</span> x <span class=\"token comment\">//정상</span>\n<span class=\"token keyword\">const</span> toStrI<span class=\"token operator\">:</span> <span class=\"token function-variable function\">IFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">''</span> <span class=\"token operator\">+</span> x <span class=\"token comment\">//정상</span></code></pre></div>\n<ul>\n<li>타입 별칭과 인터페이스는 모두 제너릭이 가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TPair<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  first<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n  second<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPair<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  first<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n  second<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>인터페이스는 타입을 확장할 수 있고 타입은 인터페이스를 확장할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IStateWithPop</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TState</span> <span class=\"token punctuation\">{</span>\n  population<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TStateWithPop</span> <span class=\"token operator\">=</span> IState <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> population<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 주의할 점은 인터페이스는 유니온 타입 같은 복잡한 타입을 확장하지는 못한다는 것이다.\n복잡한 타입을 확장하고 싶다면 타입과 &#x26;를 사용해야 한다.</p>\n<p><strong>인터페이스 선언과 타입선언의 다른 점은 무엇일까?</strong></p>\n<ul>\n<li>유니온 타입은 있지만 유니온 인터페이스라는 개념은 없다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">AorB</span> <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span></code></pre></div>\n<p>인터페이스는 타입을 확장할 수 있지만 유니온은 할 수 없다. 그런데 유니온 타입을 확장하는게 필요할 때가 있다.\n다음 코드를 봐보자. 아래처럼 사용할 수는 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Input</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Output</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">VariableMap</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Input <span class=\"token operator\">|</span> Output\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또는 유니온 타입에 name속성을 붙인 타입을 만들 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">NamedVariable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Input <span class=\"token operator\">|</span> Output<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 타입은 인터페이스로 표현할 수 없다. type키워드는 일반적으로 interface보다 쓰임새가 많다.\ntype키워드는 유니온이 될 수도 있고 매핑된 타입 또는 조건부 타입같은 고급기능에 활용되기도 한다.\n튜플과 배열 타입도 type 키워드를 이용해 더 간결하게 표현할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Pair</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">StringList</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NamedNums</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>인터페이스로도 튜플과 비슷하게 구현할 수 있기는 하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Tuple</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  length<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> t<span class=\"token operator\">:</span> Tuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>그러나, 인터페이스로 튜플과 비슷하게 구현하면 튜플에서 사용할 수 있는 concat같은 메서드들을 사용할 수 없다.\n그러므로 튜플은 type키워드로 구현하는 것이 낫다.\n반면, 인터페이스는 타입에 없는 몇 가지 기능이 있다. 그중 하나는 바로 <code class=\"language-text\">보강이 가능하다는 것</code>이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IState</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  capital<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IState</span> <span class=\"token punctuation\">{</span>\n  population<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> wyoming<span class=\"token operator\">:</span> IState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Wyoming'</span><span class=\"token punctuation\">,</span>\n  capital<span class=\"token operator\">:</span> <span class=\"token string\">'cc'</span><span class=\"token punctuation\">,</span>\n  population<span class=\"token operator\">:</span> <span class=\"token number\">500_000</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 예제처럼 속성을 확장하는 것을 <code class=\"language-text\">선언 병합</code>이라고 한다.</p>\n<p><strong>타입과 인터페이스 둘 중 어느 것을 사용해야할까?</strong>\n복잡한 타입이라면 <code class=\"language-text\">타입별칭</code>을 사용하면 된다.\n어떤 API에 대한 타입 선언을 작성해야 한다면 <code class=\"language-text\">인터페이스</code>를 사용하는 게 좋다.\nAPI가 변경될 때 사용자가 인터페이스를 통해 새로운 필드를 병합할 수 있어 유용하기 때문이다.\n그러나 프로젝트 내부적으로 사용되는 타입에 선언병합이 발생하는 것은 잘못된 설계이다. 이럴 때는 <code class=\"language-text\">타입</code>을 써야 한다.\n보통 프로젝트에서 어떤 문법을 사용할지 결정할 때 한 가지 일관된 스타일을 확립하고 보강기법이 필요한지 고려해야한다.</p>","frontmatter":{"title":"interface and type","date":"November 08, 2022"}}},"pageContext":{"slug":"/typescript/interface-and-type/","previous":{"fields":{"slug":"/typescript/type-system/"},"frontmatter":{"title":"타입스크립트의 타입 시스템1"}},"next":{"fields":{"slug":"/typescript/typescript-generic/"},"frontmatter":{"title":"typescript-generic"}}}},"staticQueryHashes":["2486386679","3128451518"]}