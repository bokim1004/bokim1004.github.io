{"componentChunkName":"component---src-templates-blog-post-js","path":"/interaction/3d-xylophone/","result":{"data":{"site":{"siteMetadata":{"title":"프론트엔드 기록 by chloee 🐳","author":"chloee","siteUrl":"https://bokim1004.github.io","comment":{"disqusShortName":"https-bokim1004-github-io","utterances":"bokim1004/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"fbca6e59-7272-5ebb-ba89-5e6443268f4e","excerpt":"난 거의 매일 꿈을 꾸는데, 꿈 속에서 은색의 실로폰을 봤다.\n하나 하나 눌러보면 소리가 나는 악기였는데, 이 장면이 너무 인상적이어서 웹으로 한번 만들어보면 좋겠다는 생각이 들었다.\n3D로 개발하고 싶어서 Three.js를 사용하려고 했는데 이번엔 react-three-fiber를 사용해서 개발해봤다. 🛠 사용한 기술 스택 React + @react-three/fiber @react-three/drei (Text3D, OrbitControls) @react-spring/three…","html":"<p>난 거의 매일 꿈을 꾸는데, 꿈 속에서 은색의 실로폰을 봤다.\n하나 하나 눌러보면 소리가 나는 악기였는데, 이 장면이 너무 인상적이어서 웹으로 한번 만들어보면 좋겠다는 생각이 들었다.\n3D로 개발하고 싶어서 Three.js를 사용하려고 했는데 이번엔 react-three-fiber를 사용해서 개발해봤다.</p>\n<h3 id=\"-사용한-기술-스택\" style=\"position:relative;\"><a href=\"#-%EC%82%AC%EC%9A%A9%ED%95%9C-%EA%B8%B0%EC%88%A0-%EC%8A%A4%ED%83%9D\" aria-label=\" 사용한 기술 스택 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛠 사용한 기술 스택</h3>\n<ul>\n<li>React + @react-three/fiber</li>\n<li>@react-three/drei (Text3D, OrbitControls)</li>\n<li>@react-spring/three (실로폰 눌리는 애니메이션 시 사용)</li>\n<li>HTML5 Audio API (소리 재생)</li>\n<li>Framer Motion (텍스트 애니메이션)</li>\n</ul>\n<h2 id=\"실제-구현한-부분\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%A0%9C-%EA%B5%AC%ED%98%84%ED%95%9C-%EB%B6%80%EB%B6%84\" aria-label=\"실제 구현한 부분 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실제 구현한 부분</h2>\n<h3 id=\"1-맨-처음-들어오면-보이는-intro-화면-만들기\" style=\"position:relative;\"><a href=\"#1-%EB%A7%A8-%EC%B2%98%EC%9D%8C-%EB%93%A4%EC%96%B4%EC%98%A4%EB%A9%B4-%EB%B3%B4%EC%9D%B4%EB%8A%94-intro-%ED%99%94%EB%A9%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"1 맨 처음 들어오면 보이는 intro 화면 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 맨 처음 들어오면 보이는 intro 화면 만들기</h3>\n<p style=\"display:flex; gap:10px; width:100%\">\n<img src=\"https://velog.velcdn.com/images/chloeee/post/5901c8a6-e761-4c4e-a4d2-7041b8fa3929/image.png\" width=\"550px\" height=\"390px\">\n</p>\n<p>react-three/drei의 <code class=\"language-text\">Text3D</code>를 사용해 Xylophone 글자를 3D로 보이게 표현했다.<br/>\n그리고 react-spring/three를 활용해, 3D 텍스트가 오른쪽으로 튀어나오는 것처럼 보이게 애니메이션 효과를 추가해줬다.<br/>\n애니메이션을 추가해줘서 화면에 들어갔을 때 역동적인 느낌을 주고 싶었다.</p>\n<h3 id=\"2-은색-3d-실로폰-만들기\" style=\"position:relative;\"><a href=\"#2-%EC%9D%80%EC%83%89-3d-%EC%8B%A4%EB%A1%9C%ED%8F%B0-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"2 은색 3d 실로폰 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 은색 3D 실로폰 만들기</h3>\n<p>각 건반을 boxGeometry를 사용해 3D박스 형태로 구현했다.</p>\n<p style=\"display:flex; gap:10px; width:100%\">\n<img src=\"https://velog.velcdn.com/images/chloeee/post/221814b4-169e-41aa-b21b-000dec2f4f23/image.png\" width=\"550px\" height=\"390px\">\n</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>animated<span class=\"token punctuation\">.</span>meshStandardMaterial\n  color<span class=\"token operator\">=</span><span class=\"token string\">\"#cccccc\"</span>\n  metalness<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n  roughness<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">}</span>\n  emissive<span class=\"token operator\">=</span><span class=\"token string\">\"#ffffff\"</span>\n  emissiveIntensity<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>emissiveIntensity<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>실로폰 건반을 만들면서, 그냥 회색이 아니라 빛을 머금은 은색 느낌을 주고 싶었다.<br/>\n그래서 <code class=\"language-text\">meshStandardMaterial</code>에 다음과 같은 속성을 설정했다. <br/>\n<code class=\"language-text\">emissive=\"#ffffff\" + emissiveIntensity</code>: 누를 때마다 빛이 더해지는 느낌을 주기 위해 설정을 했고,\nreact-spring으로 이 값을 애니메이션 처리해, 누르면 반짝이는 듯한 반응을 주었다.</p>\n<h3 id=\"3-마우스로-실로폰-건반을-클릭하면-해당-음을-재생시키기\" style=\"position:relative;\"><a href=\"#3-%EB%A7%88%EC%9A%B0%EC%8A%A4%EB%A1%9C-%EC%8B%A4%EB%A1%9C%ED%8F%B0-%EA%B1%B4%EB%B0%98%EC%9D%84-%ED%81%B4%EB%A6%AD%ED%95%98%EB%A9%B4-%ED%95%B4%EB%8B%B9-%EC%9D%8C%EC%9D%84-%EC%9E%AC%EC%83%9D%EC%8B%9C%ED%82%A4%EA%B8%B0\" aria-label=\"3 마우스로 실로폰 건반을 클릭하면 해당 음을 재생시키기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 마우스로 실로폰 건반을 클릭하면 해당 음을 재생시키기</h3>\n<p>그냥 누르면 음이 재생하게 하는 건 쉬워보였지만…3D라는 특성 상 여러 개념들을 알고 있어야 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> raycaster <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Raycaster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> mouse <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Vector2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>raycaster는 마우스가 클릭한 위치에서 3D공간으로 광선(ray)을 쏘는 도구이고,\nmouse는 현재 마우스 위치를 저장할 벡터 값으로 보면 된다.</p>\n<p><code class=\"language-text\">🧭 1단계: 마우스 좌표 → NDC 좌표로 변환</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">mouse<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>clientX <span class=\"token operator\">/</span> window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\nmouse<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>clientY <span class=\"token operator\">/</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n<p>마우스 좌표를 Three.js의 카메라 공간인 NDC (Normalized Device Coordinates) 로 바꿔야 했다.\n이 범위는 -1 ~ 1 사이고, WebGL에서 3D 위치를 추적하는 데 필요하다.\n브라우저의 마우스 좌표와 webGL(Three.js)의 카메라 좌표계는 다르기 때문에 그렇다.</p>\n<p><code class=\"language-text\">🎯 2단계: Raycaster로 ray 쏘기</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">raycaster<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">setFromCamera</span><span class=\"token punctuation\">(</span>mouse<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span> camera<span class=\"token punctuation\">)</span></code></pre></div>\n<p>변환된 마우스 위치를 기준으로, 카메라에서 그 위치로 보이지 않는 가상의 선(ray)을 쏜다.\n이 선이 어떤 3D 오브젝트와 충돌했는지 확인할 수 있다.<br/>\nmouse는 현재 마우스 위치를 -1~1 범위의 WebGL 좌표(NDC) 로 변환해 저장하고,\n이 값을 이용해 raycaster가 3D 공간에 광선을 쏘게 되는 것이다.</p>\n<p><code class=\"language-text\">🎯 3단계: 어떤 오브젝트와 충돌했는지 찾기</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> intersects <span class=\"token operator\">=</span> raycaster<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">intersectObjects</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span></code></pre></div>\n<p>장면(Scene)에 있는 모든 객체들과 비교해서,ray가 어떤 오브젝트에 먼저 부딪혔는지를 확인한다.\nintersects는 부딪힌 순서대로 객체들을 배열로 반환해준다.</p>\n<p><code class=\"language-text\">🎯 4단계: 충돌한 오브젝트에서 note 읽기 → 사운드 재생</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>intersects<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> intersects<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>object\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>userData<span class=\"token punctuation\">.</span>note\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>맨 처음 부딪힌 오브젝트를 key로 가져오고, 그 객체에 미리 설정해둔 userData.note 속성을 통해 무슨 음인지 알아낸다.</p>\n<p><code class=\"language-text\">음 재생 + 애니메이션 상태 설정</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setPressedNote</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 눌림 애니메이션용 상태 저장</span>\n  <span class=\"token function\">setCurrentNote</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 화면에 표시할 현재 음</span>\n  <span class=\"token function\">play</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 사운드 재생</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPressedNote</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>audio api를 이용해 저장한 사운드를 재생하게 하면 끝이다!</p>\n<h3 id=\"live-demo\" style=\"position:relative;\"><a href=\"#live-demo\" aria-label=\"live demo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Live Demo</h3>\n<p>vercel을 이용해 배포를 했다~! <br/>\n<a href=\"https://xylophone-3-d.vercel.app/\">https://xylophone-3-d.vercel.app/</a></p>\n<h2 id=\"정리해보면\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC%ED%95%B4%EB%B3%B4%EB%A9%B4\" aria-label=\"정리해보면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리해보면</h2>\n<p>사용자가 실로폰을 클릭하면, 해당 위치를 기준으로 3D 공간에 ray(광선)를 쏘고 어떤 건반과 충돌했는지 확인해 해당 음을 재생하는 것이다.\n동시에 건반은 살짝 눌리는 애니메이션과 함께 화면에 해당 음이 떠오르게 구현했다.</p>\n<p>3D 실로폰을 개발해보며, 내가 머릿속으로 생각했던 것을 웹 상에서 구현하는 것이 재밌었다.\n그리고 react-three-fiber를 처음 사용해보며 three.js를 공부하며 배웠던 지식이 있어서 그런지 엄청 낯설지가 않았다.\n이번에 만든게 엄청 완성도가 높은 것은 아니지만, 이것 저것 많이 개발해보며 인터랙션쪽 시야를 더 넓혀보고 싶다.</p>","frontmatter":{"title":"3D xylophone 만들기","date":"June 12, 2025","image":"https://velog.velcdn.com/images/chloeee/post/ffefdfe8-2d64-4b9f-8742-d559bb0be436/image.png"}}},"pageContext":{"slug":"/interaction/3d-xylophone/","previous":{"fields":{"slug":"/etc/hanghae-fe-5th-3chapter.retro/"},"frontmatter":{"title":"항해플러스 프론트엔드 5기 | 3챕터 회고"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}